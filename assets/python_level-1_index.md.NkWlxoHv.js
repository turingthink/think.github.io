import{j as t,c as o,b as l,ag as e}from"./chunks/framework.CPnt7f93.js";const p=JSON.parse('{"title":"Python课程初级阶段（感知与入门）导论","description":"","frontmatter":{},"headers":[],"relativePath":"python/level-1/index.md","filePath":"python/level-1/index.md","lastUpdated":1761651013000}'),r={name:"python/level-1/index.md"};function i(n,a,h,s,d,c){return l(),o("div",null,[...a[0]||(a[0]=[e('<h1 id="python课程初级阶段-感知与入门-导论" tabindex="-1">Python课程初级阶段（感知与入门）导论 <a class="header-anchor" href="#python课程初级阶段-感知与入门-导论" aria-label="Permalink to &quot;Python课程初级阶段（感知与入门）导论&quot;">​</a></h1><p>——写给学生家长与合作方的课程设计解析</p><h2 id="一、为什么要从-感知与入门-开始" tabindex="-1">一、为什么要从“感知与入门”开始？ <a class="header-anchor" href="#一、为什么要从-感知与入门-开始" aria-label="Permalink to &quot;一、为什么要从“感知与入门”开始？&quot;">​</a></h2><p>第一阶段（1-15课时）是整个Python课程的**“兴趣奠基期”与“思维启蒙期”<strong>。我们深知11-15岁少年正处于皮亚杰认知发展理论中的“形式运算阶段”——抽象逻辑思维开始快速发展，但仍需要</strong>具象化的体验**来建立对复杂概念的理解；同时，这个年龄段的孩子对“有用、有趣、有成就感”的任务更易产生内在动机（自我决定理论）。</p><p>因此，本阶段不急于灌输枯燥的语法规则，而是通过**“看得见、摸得着、能创造”的STEAM项目**，让孩子在“玩中学”中建立对编程的直觉认知：比如用代码画出自己设计的“梦想家园”（艺术+数学）、用程序计算班级同学的健康指标（科学+数学）。这种设计既能规避“入门即放弃”的风险，更能为后续进阶学习埋下“我能行”的信心种子。</p><h2 id="二、本阶段核心目标-不止是-学python-更是-培养思维与兴趣" tabindex="-1">二、本阶段核心目标：不止是“学Python”，更是“培养思维与兴趣” <a class="header-anchor" href="#二、本阶段核心目标-不止是-学python-更是-培养思维与兴趣" aria-label="Permalink to &quot;二、本阶段核心目标：不止是“学Python”，更是“培养思维与兴趣”&quot;">​</a></h2><p>我们希望通过15课时的学习，让孩子实现三重成长：</p><h3 id="_1-知识技能-建立编程的-基础语言体系" tabindex="-1">1. <strong>知识技能：建立编程的“基础语言体系”</strong> <a class="header-anchor" href="#_1-知识技能-建立编程的-基础语言体系" aria-label="Permalink to &quot;1. **知识技能：建立编程的“基础语言体系”**&quot;">​</a></h3><p>孩子将掌握Python最核心的入门知识，但全程围绕“解决问题”展开：</p><ul><li>用<code>print()</code>输出个性化内容（如带emoji的自我介绍），理解“代码是与计算机对话的工具”；</li><li>用变量记录数据（如身高、分数），明白“变量是存储信息的‘盒子’”；</li><li>用<code>turtle</code>库绘图（从直线到组合图形），掌握坐标、循环、条件判断等基础逻辑；</li><li>最终能独立完成“几何画册”这样的小项目——不是零散的代码片段，而是“有主题、有设计”的作品。</li></ul><h3 id="_2-思维发展-悄悄激活-计算思维与空间推理" tabindex="-1">2. <strong>思维发展：悄悄激活“计算思维与空间推理”</strong> <a class="header-anchor" href="#_2-思维发展-悄悄激活-计算思维与空间推理" aria-label="Permalink to &quot;2. **思维发展：悄悄激活“计算思维与空间推理”**&quot;">​</a></h3><p>课程设计暗藏对孩子认知能力的培养，呼应STEAM教育的跨学科本质：</p><ul><li><strong>数学关联</strong>：画正方形时理解“边长×4=周长”，用坐标绘图时建立“二维空间与数字的对应”（如x轴对应左右、y轴对应上下），这些都是初中数学的前置铺垫；</li><li><strong>艺术融合</strong>：给图形选颜色、设计“四季主题”画册时，孩子需要思考“如何用代码表达审美”，实现“技术与艺术的平衡”；</li><li><strong>计算思维</strong>：把“画一朵花”拆解为“画花瓣→画花茎→画叶子”（分解能力），用循环重复绘制相同花瓣（模式识别能力）——这些思维会迁移到数学解题、生活问题解决中。</li></ul><h3 id="_3-情感态度-让孩子-爱上创造-不怕试错" tabindex="-1">3. <strong>情感态度：让孩子“爱上创造，不怕试错”</strong> <a class="header-anchor" href="#_3-情感态度-让孩子-爱上创造-不怕试错" aria-label="Permalink to &quot;3. **情感态度：让孩子“爱上创造，不怕试错”**&quot;">​</a></h3><p>我们认为，比学会代码更重要的是建立对“学习本身”的积极态度：</p><ul><li><strong>成就感驱动</strong>：每节课都有“能带走的成果”（如签名代码、图形作品），避免“学了半天不知道用在哪”的迷茫；</li><li><strong>成长型思维</strong>：当代码出错时（比如图形画歪了、循环次数不对），老师会引导孩子“找bug就像侦探破案”，鼓励“修改参数再试一次”，培养“错误是进步机会”的认知；</li><li><strong>同伴协作</strong>：阶段项目“几何画册”采用小组合作，孩子需要分工（有人画房屋、有人画树木）、沟通（如何让图形风格统一），在协作中理解“1+1&gt;2”的道理。</li></ul><h2 id="三、课程设计的-科学逻辑-每一节课都藏着对孩子的理解" tabindex="-1">三、课程设计的“科学逻辑”：每一节课都藏着对孩子的理解 <a class="header-anchor" href="#三、课程设计的-科学逻辑-每一节课都藏着对孩子的理解" aria-label="Permalink to &quot;三、课程设计的“科学逻辑”：每一节课都藏着对孩子的理解&quot;">​</a></h2><h3 id="_1-从-孩子的世界-出发——任务设计贴近生活" tabindex="-1">1. <strong>从“孩子的世界”出发——任务设计贴近生活</strong> <a class="header-anchor" href="#_1-从-孩子的世界-出发——任务设计贴近生活" aria-label="Permalink to &quot;1. **从“孩子的世界”出发——任务设计贴近生活**&quot;">​</a></h3><p>我们拒绝“为了编程而编程”，所有案例都源自孩子熟悉的场景：</p><ul><li>第一节课让孩子用代码输出“我的专属签名”，把编程和“自我表达”绑定；</li><li>“成绩评级器”项目用班级真实分数做练习，让孩子发现“编程能解决学习中的问题”；</li><li>“植物生长分析”用科学课常见的“豆芽生长记录”，让编程成为“科学探究的工具”。</li></ul><p>这种“生活化任务”能帮孩子快速建立“编程有用”的认知，符合维果茨基“最近发展区”理论——从孩子已有的生活经验出发，逐步拓展到新的知识领域。</p><h3 id="_2-可视化优先-——让抽象代码变得-看得见" tabindex="-1">2. <strong>“可视化优先”——让抽象代码变得“看得见”</strong> <a class="header-anchor" href="#_2-可视化优先-——让抽象代码变得-看得见" aria-label="Permalink to &quot;2. **“可视化优先”——让抽象代码变得“看得见”**&quot;">​</a></h3><p>11-15岁孩子的抽象思维仍在发展，因此本阶段以<code>turtle</code>库绘图为核心载体：</p><ul><li>输入<code>forward(50)</code>，屏幕上的小海龟就会向前走50步；修改<code>right(90)</code>，海龟就会转弯——代码的效果“即时可见”，孩子能直观理解“代码指令与结果的对应关系”；</li><li>从“画一条直线”到“画一朵花”，难度层层递进，每一步的进步都“肉眼可见”，这种“高反馈”能持续激发孩子的探索欲（自我决定理论中的“胜任感”需求）。</li></ul><h3 id="_3-小步子-强支持-——不让任何一个孩子掉队" tabindex="-1">3. <strong>“小步子+强支持”——不让任何一个孩子掉队</strong> <a class="header-anchor" href="#_3-小步子-强支持-——不让任何一个孩子掉队" aria-label="Permalink to &quot;3. **“小步子+强支持”——不让任何一个孩子掉队**&quot;">​</a></h3><p>我们针对不同基础的孩子设计了“分层任务”：</p><ul><li><strong>基础层</strong>：提供“代码模板”，孩子只需填充关键参数（如“把<code>color(&quot;red&quot;)</code>改成你喜欢的颜色”）；</li><li><strong>进阶层</strong>：挑战“拓展任务”（如“给正方形加阴影”“让花朵旋转起来”）；</li><li><strong>教师支持</strong>：采用“1+N”指导模式（1个教师+小组互助），确保每个孩子都能在“跳一跳就够得着”的难度中稳步前进。</li></ul><h2 id="四、您能看到的孩子成长轨迹" tabindex="-1">四、您能看到的孩子成长轨迹 <a class="header-anchor" href="#四、您能看到的孩子成长轨迹" aria-label="Permalink to &quot;四、您能看到的孩子成长轨迹&quot;">​</a></h2><p>15课时后，孩子不仅能掌握Python入门知识，更能呈现一份**“看得见、说得出”的成长成果**：</p><ul><li>一份包含5个以上主题图形的《几何画册》（代码+手绘设计稿）；</li><li>一段“代码讲解视频”——孩子能对着自己的作品，解释“我用了什么循环/条件，为什么这么设计”；</li><li>一种“主动探索的习惯”——比如课后会问“能不能用代码画我的宠物？”“怎么让图形动起来？”。</li></ul><h2 id="五、致家长与合作方-我们邀您一起-守护兴趣" tabindex="-1">五、致家长与合作方：我们邀您一起“守护兴趣” <a class="header-anchor" href="#五、致家长与合作方-我们邀您一起-守护兴趣" aria-label="Permalink to &quot;五、致家长与合作方：我们邀您一起“守护兴趣”&quot;">​</a></h2><p>第一阶段的核心是“激发兴趣”，而非“追求进度”。我们希望：</p><ul><li><strong>家长</strong>：多关注孩子“作品的创意”而非“代码的对错”，当孩子兴奋地展示“我画的房子”时，哪怕代码有小瑕疵，也请先肯定他的创造欲；</li><li><strong>合作方</strong>：我们会定期分享孩子的课堂成果（如“每周优秀画册”），也欢迎提出您对课程的建议——让我们一起把编程课变成孩子“喜欢、受益、难忘”的成长体验。</li></ul><p>第一阶段是孩子编程之旅的“第一颗扣子”，我们用心设计每一个细节，只为让孩子在“感知编程、创造美好”的过程中，收获知识、思维与信心，为后续的进阶学习打下最坚实的基础。</p>',34)])])}const g=t(r,[["render",i]]);export{p as __pageData,g as default};
