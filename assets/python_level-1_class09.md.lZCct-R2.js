import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const g=JSON.parse('{"title":"小组协作：用代码绘制主题几何画册","description":"","frontmatter":{},"headers":[],"relativePath":"python/level-1/class09.md","filePath":"python/level-1/class09.md","lastUpdated":1761651013000}'),e={name:"python/level-1/class09.md"};function h(t,s,p,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="小组协作-用代码绘制主题几何画册" tabindex="-1">小组协作：用代码绘制主题几何画册 <a class="header-anchor" href="#小组协作-用代码绘制主题几何画册" aria-label="Permalink to &quot;小组协作：用代码绘制主题几何画册&quot;">​</a></h1><h2 id="课题" tabindex="-1">课题 <a class="header-anchor" href="#课题" aria-label="Permalink to &quot;课题&quot;">​</a></h2><p>循环与条件的“图形魔法”——团队创作几何主题画册</p><h2 id="教学时间" tabindex="-1">教学时间 <a class="header-anchor" href="#教学时间" aria-label="Permalink to &quot;教学时间&quot;">​</a></h2><p>2课时（90分钟）</p><h2 id="课前准备" tabindex="-1">课前准备 <a class="header-anchor" href="#课前准备" aria-label="Permalink to &quot;课前准备&quot;">​</a></h2><ul><li><strong>教师端</strong>：电脑（Python 3.10+，预装turtle库）、投影仪、多媒体课件（含优秀几何画册案例：如“四季”“动物”主题）、实物几何教具（不同颜色的正方形/三角形积木）、小组分工表模板、互评评分表（含“图形多样性”“代码逻辑性”“合作默契度”维度）。</li><li><strong>学生端</strong>：电脑（Python环境）、笔记本（记录分工和代码思路）、彩笔（绘制画册草图）、U盘（保存小组代码）。</li><li><strong>教学素材</strong>：循环+条件组合代码模板（如“画大小渐变的正方形”）、主题参考列表（四季、节日、校园、自然）、AI代码小助手（支持“如何让图形居中”“如何设置渐变色”等问题）。</li></ul><h2 id="一、导入活动-从-实物拼贴-到-代码组合-15分钟" tabindex="-1">一、导入活动：从“实物拼贴”到“代码组合”（15分钟） <a class="header-anchor" href="#一、导入活动-从-实物拼贴-到-代码组合-15分钟" aria-label="Permalink to &quot;一、导入活动：从“实物拼贴”到“代码组合”（15分钟）&quot;">​</a></h2><h2 id="活动1-几何积木拼主题-——感知图形组合逻辑" tabindex="-1">活动1：“几何积木拼主题”——感知图形组合逻辑 <a class="header-anchor" href="#活动1-几何积木拼主题-——感知图形组合逻辑" aria-label="Permalink to &quot;活动1：“几何积木拼主题”——感知图形组合逻辑&quot;">​</a></h2><ul><li>分组发放几何积木（正方形、三角形、圆形），任务：用10分钟拼出“春天”主题场景（如“三角形=屋顶，正方形=房子，圆形=太阳”）。</li><li>每组展示成果，提问：“你们用了哪些图形？它们的大小、颜色有什么不同？”引导发现“主题需要多个图形按规律组合”。</li></ul><h2 id="活动2-代码积木-回顾——衔接循环与条件知识" tabindex="-1">活动2：“代码积木”回顾——衔接循环与条件知识 <a class="header-anchor" href="#活动2-代码积木-回顾——衔接循环与条件知识" aria-label="Permalink to &quot;活动2：“代码积木”回顾——衔接循环与条件知识&quot;">​</a></h2><ul><li>教师板书：“循环（for）= 重复画相同图形，条件（if）= 让图形有差异（如颜色、大小）”。</li><li>示例代码片段：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle.Turtle()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 循环5次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 偶数次画红色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t.color(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 奇数次画蓝色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t.color(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 大小递增（50,60,70...）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li>提问：“这段代码会画出什么效果？”（5个颜色交替、大小递增的正方形），明确“循环+条件=多样且有序的图形”。</li></ul><h2 id="二、知识点讲解-主题画册的代码实现逻辑-25分钟" tabindex="-1">二、知识点讲解：主题画册的代码实现逻辑（25分钟） <a class="header-anchor" href="#二、知识点讲解-主题画册的代码实现逻辑-25分钟" aria-label="Permalink to &quot;二、知识点讲解：主题画册的代码实现逻辑（25分钟）&quot;">​</a></h2><h2 id="模块1-确定主题与图形设计-10分钟" tabindex="-1">模块1：确定主题与图形设计（10分钟） <a class="header-anchor" href="#模块1-确定主题与图形设计-10分钟" aria-label="Permalink to &quot;模块1：确定主题与图形设计（10分钟）&quot;">​</a></h2><ul><li><strong>主题选择</strong>：从参考列表中选1个（或自定），要求能通过几何图形表达（如“秋天”→ 三角形=枫叶、圆形=果实、长方形=树干）。</li><li><strong>图形拆解</strong>：以“秋天”为例，小组需讨论： <ul><li>基础图形：需要哪些图形（三角形、圆形、线段）；</li><li>变化维度：大小（如枫叶从小到大）、颜色（如橙色→黄色渐变）、位置（如果实分布在树枝上）。</li></ul></li><li><strong>草图绘制</strong>：学生用彩笔在笔记本上画画册分镜（至少3个场景），标注每个图形的“代码参数”（如“枫叶：三角形，边长30，颜色橙色，位置(0,50)”）。</li></ul><h2 id="模块2-循环-条件的组合进阶-15分钟" tabindex="-1">模块2：循环+条件的组合进阶（15分钟） <a class="header-anchor" href="#模块2-循环-条件的组合进阶-15分钟" aria-label="Permalink to &quot;模块2：循环+条件的组合进阶（15分钟）&quot;">​</a></h2><ul><li><strong>核心逻辑</strong>：用函数封装单个图形（如<code>draw_leaf(size, color)</code>），再用循环批量生成，用条件控制差异。</li><li><strong>代码示例：绘制“秋天枫叶群”</strong><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle.Turtle()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">t.speed(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最快速度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> draw_leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(size, color):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义画枫叶的函数（三角形简化）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.color(color)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.begin_fill()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 三角形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t.forward(size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.end_fill()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用循环+条件生成10片不同的枫叶</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    size </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 大小递增（20,25...65）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 条件：前5片橙色，后5片黄色</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        color </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;orange&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        color </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;yellow&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 移动位置（避免重叠）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.goto(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># x坐标从-200到200，y=0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    t.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    draw_leaf(size, color)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.done()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li><li><strong>关键技巧</strong>： <ol><li>用<code>penup()</code>和<code>goto(x,y)</code>移动画笔，避免图形重叠（坐标知识应用）；</li><li>函数参数<code>size</code>和<code>color</code>让图形可定制（模块化思维）；</li><li>循环变量<code>i</code>控制大小和位置，实现“有序排列”（数学规律应用）。</li></ol></li></ul><h2 id="三、项目实操-小组协作完成主题画册-30分钟" tabindex="-1">三、项目实操：小组协作完成主题画册（30分钟） <a class="header-anchor" href="#三、项目实操-小组协作完成主题画册-30分钟" aria-label="Permalink to &quot;三、项目实操：小组协作完成主题画册（30分钟）&quot;">​</a></h2><h2 id="阶段1-分工明确-5分钟" tabindex="-1">阶段1：分工明确（5分钟） <a class="header-anchor" href="#阶段1-分工明确-5分钟" aria-label="Permalink to &quot;阶段1：分工明确（5分钟）&quot;">​</a></h2><ul><li>每组4人，按“设计组”“编码组”“测试组”“记录组”分工（可轮换）： <ul><li>设计组：完善草图，标注每个图形的参数（大小、颜色、坐标）；</li><li>编码组：将草图转化为代码，使用函数和循环；</li><li>测试组：运行代码，检查图形是否符合设计（如位置错误、颜色不对）；</li><li>记录组：填写“开发日志”（遇到的问题及解决方法）。</li></ul></li></ul><h2 id="阶段2-代码实现-20分钟" tabindex="-1">阶段2：代码实现（20分钟） <a class="header-anchor" href="#阶段2-代码实现-20分钟" aria-label="Permalink to &quot;阶段2：代码实现（20分钟）&quot;">​</a></h2><ul><li><strong>基础要求</strong>：至少包含3种图形（正方形、三角形、圆形），使用循环生成5个以上图形，用条件控制颜色/大小差异。</li><li><strong>进阶挑战</strong>：添加文字说明（<code>t.write(&quot;秋天来了&quot;)</code>）、背景色（<code>turtle.bgcolor(&quot;skyblue&quot;)</code>）、图形旋转（<code>t.right(angle)</code>）。</li><li><strong>教师支持</strong>： <ul><li>打开AI代码小助手，学生可提问“如何让圆形排成圆形？”“怎么设置渐变色？”，AI生成参考代码（如用角度计算圆形排列坐标）；</li><li>巡视各组，重点指导“坐标计算”（如“要让图形居中，x从-100到100”）和“函数调用”（如忘记传参数导致图形不变）。</li></ul></li></ul><h2 id="阶段3-初稿调试-5分钟" tabindex="-1">阶段3：初稿调试（5分钟） <a class="header-anchor" href="#阶段3-初稿调试-5分钟" aria-label="Permalink to &quot;阶段3：初稿调试（5分钟）&quot;">​</a></h2><ul><li>每组运行代码，截图保存初稿效果，测试组记录需优化的问题（如“枫叶重叠”“颜色不够鲜明”）。</li></ul><h2 id="四、互评与优化-从-初稿-到-成品-15分钟" tabindex="-1">四、互评与优化：从“初稿”到“成品”（15分钟） <a class="header-anchor" href="#四、互评与优化-从-初稿-到-成品-15分钟" aria-label="Permalink to &quot;四、互评与优化：从“初稿”到“成品”（15分钟）&quot;">​</a></h2><ol><li><strong>小组展示</strong>：每组派代表投屏初稿，讲解： <ul><li>主题与图形的关联（如“用黄色圆形代表秋天的果实”）；</li><li>代码中循环和条件的应用（如“用for i in range(6)画了6棵树，if i&gt;3让后3棵变高”）。</li></ul></li><li><strong>多维互评</strong>：各组用评分表互评，重点： <ul><li>数学性：图形大小/位置是否有规律（如比例递增）；</li><li>艺术性：颜色搭配是否符合主题（如“冬天”用蓝色/白色）；</li><li>技术性：代码是否用函数封装、循环是否简洁（避免重复代码）。</li></ul></li><li><strong>教师点评</strong>：肯定创意（如“用三角形旋转45度表现风车”），指出可优化点（如“用x = i*50让图形更均匀”）。</li></ol><h2 id="五、总结与作业-5分钟" tabindex="-1">五、总结与作业（5分钟） <a class="header-anchor" href="#五、总结与作业-5分钟" aria-label="Permalink to &quot;五、总结与作业（5分钟）&quot;">​</a></h2><h2 id="课堂总结" tabindex="-1">课堂总结： <a class="header-anchor" href="#课堂总结" aria-label="Permalink to &quot;课堂总结：&quot;">​</a></h2><ul><li>主题画册=“图形拆解+代码组合”：先确定主题→拆解为基础图形→用循环批量生成→用条件制造差异；</li><li>团队协作关键：明确分工+及时沟通（如设计组和编码组需同步图形参数）。</li></ul><h2 id="课后作业" tabindex="-1">课后作业： <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;课后作业：&quot;">​</a></h2><ol><li>小组根据互评建议优化代码（如调整颜色、增加图形数量），最终版命名为“主题_小组名.py”；</li><li>每人写1段“编程日记”：记录自己在项目中负责的部分、遇到的最大困难及解决方法（如“我负责画太阳，一开始圆形太大，后来改小了radius参数”）。</li></ol><h2 id="教学理论支撑" tabindex="-1">教学理论支撑： <a class="header-anchor" href="#教学理论支撑" aria-label="Permalink to &quot;教学理论支撑：&quot;">​</a></h2><ol><li><strong>皮亚杰形式运算阶段理论</strong>：通过“实物拼贴→草图设计→代码实现”的三阶转化，帮助学生从具体形象思维（积木拼贴）过渡到抽象逻辑思维（用代码参数表达图形特征）。</li><li><strong>维果茨基最近发展区</strong>：小组协作中，能力强的学生可作为“脚手架”帮助同伴（如编码组教测试组看懂循环逻辑）；AI代码小助手解决语法细节问题，降低“想得到做不出”的挫折感。</li><li><strong>STEAM教育融合</strong>： <ul><li>科学（图形规律观察）、技术（Python代码实现）、工程（团队分工与问题解决）、艺术（主题创意与色彩搭配）、数学（坐标计算、大小比例、循环变量规律）的跨学科整合；</li><li>强调“过程性创造”，而非单一结果，符合STEAM“动手实践+创新应用”的核心。</li></ul></li><li><strong>自我决定理论</strong>：通过小组命名、主题自选、分工自主，满足学生的自主性需求；互评中的正向反馈（如“创意之星”）增强归属感与胜任感，激发内在学习动机。</li></ol>`,33)])])}const c=i(e,[["render",h]]);export{g as __pageData,c as default};
