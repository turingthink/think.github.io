import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const y=JSON.parse('{"title":"第二部分：迷宫游戏进阶——碰撞检测与关卡设计","description":"","frontmatter":{},"headers":[],"relativePath":"python/level-3/class02.md","filePath":"python/level-3/class02.md","lastUpdated":1761651013000}'),h={name:"python/level-3/class02.md"};function e(p,s,t,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="第二部分-迷宫游戏进阶——碰撞检测与关卡设计" tabindex="-1">第二部分：迷宫游戏进阶——碰撞检测与关卡设计 <a class="header-anchor" href="#第二部分-迷宫游戏进阶——碰撞检测与关卡设计" aria-label="Permalink to &quot;第二部分：迷宫游戏进阶——碰撞检测与关卡设计&quot;">​</a></h1><h2 id="课题" tabindex="-1">课题 <a class="header-anchor" href="#课题" aria-label="Permalink to &quot;课题&quot;">​</a></h2><p>让游戏“有规则”：墙壁碰撞与多关卡迷宫</p><h2 id="教学时间" tabindex="-1">教学时间 <a class="header-anchor" href="#教学时间" aria-label="Permalink to &quot;教学时间&quot;">​</a></h2><p>2课时（90分钟）</p><h2 id="课前准备" tabindex="-1">课前准备 <a class="header-anchor" href="#课前准备" aria-label="Permalink to &quot;课前准备&quot;">​</a></h2><ul><li><strong>教师端</strong>：电脑（含前两课时代码、碰撞检测演示程序）、投影仪、多媒体课件（含碰撞检测原理动画：如矩形重叠检测）、“迷宫关卡卡片”（2张不同复杂度的网格迷宫）。</li><li><strong>学生端</strong>：电脑（保存前两课时的角色移动代码）、上次课手绘的迷宫地图、笔记本（记录碰撞逻辑要点）、彩色笔（标注关卡难点）。</li><li><strong>教学素材</strong>：碰撞检测代码模板、多关卡地图数据（用列表表示墙壁位置）、AI代码小助手（预设“碰撞逻辑”“关卡切换”等问题的解答）。</li></ul><h2 id="一、导入活动-从-无规则移动-到-有边界游戏-15分钟" tabindex="-1">一、导入活动：从“无规则移动”到“有边界游戏”（15分钟） <a class="header-anchor" href="#一、导入活动-从-无规则移动-到-有边界游戏-15分钟" aria-label="Permalink to &quot;一、导入活动：从“无规则移动”到“有边界游戏”（15分钟）&quot;">​</a></h2><h2 id="活动1-盲人摸墙-体验——理解碰撞意义" tabindex="-1">活动1：“盲人摸墙”体验——理解碰撞意义 <a class="header-anchor" href="#活动1-盲人摸墙-体验——理解碰撞意义" aria-label="Permalink to &quot;活动1：“盲人摸墙”体验——理解碰撞意义&quot;">​</a></h2><ul><li>学生蒙眼在教室划定区域内行走，碰到障碍物（如椅子）需停下：“游戏中角色碰到墙壁也要停下，否则会‘穿墙’——这就是碰撞检测”。</li><li>提问：“怎么判断‘碰到墙’？”引导学生发现“角色和墙的位置重叠了”。</li></ul><h2 id="活动2-迷宫关卡分析-——拆解关卡元素" tabindex="-1">活动2：“迷宫关卡分析”——拆解关卡元素 <a class="header-anchor" href="#活动2-迷宫关卡分析-——拆解关卡元素" aria-label="Permalink to &quot;活动2：“迷宫关卡分析”——拆解关卡元素&quot;">​</a></h2><ul><li>展示“迷宫关卡卡片”：简单关卡（3面墙）和复杂关卡（多面墙+岔路）。</li><li>小组讨论：“要让代码实现这张地图，需要告诉计算机‘哪些位置是墙’？”（用坐标标注墙的位置）。</li></ul><h2 id="二、知识点讲解-碰撞检测与关卡设计-35分钟" tabindex="-1">二、知识点讲解：碰撞检测与关卡设计（35分钟） <a class="header-anchor" href="#二、知识点讲解-碰撞检测与关卡设计-35分钟" aria-label="Permalink to &quot;二、知识点讲解：碰撞检测与关卡设计（35分钟）&quot;">​</a></h2><h2 id="模块1-定义墙壁——用列表存储-禁止区域-10分钟" tabindex="-1">模块1：定义墙壁——用列表存储“禁止区域”（10分钟） <a class="header-anchor" href="#模块1-定义墙壁——用列表存储-禁止区域-10分钟" aria-label="Permalink to &quot;模块1：定义墙壁——用列表存储“禁止区域”（10分钟）&quot;">​</a></h2><ul><li><strong>墙壁的数据形式</strong>：用列表存储多个矩形（<code>pygame.Rect</code>），每个矩形代表一面墙，类比“在地图上画禁止通行的线”：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义迷宫墙壁（简单关卡：4面墙）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">walls </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 顶部墙（x=0,y=0,宽=600,高=20）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 左侧墙</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">580</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 右侧墙</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">380</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 底部墙</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><strong>绘制墙壁</strong>：在主循环中用<code>pygame.draw.rect()</code>批量绘制，颜色设为灰色（与背景区分）：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在刷新画面部分添加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> wall </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> walls:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    pygame.draw.rect(screen, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">), wall)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 灰色墙壁</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="模块2-碰撞检测——判断-角色是否碰到墙-15分钟" tabindex="-1">模块2：碰撞检测——判断“角色是否碰到墙”（15分钟） <a class="header-anchor" href="#模块2-碰撞检测——判断-角色是否碰到墙-15分钟" aria-label="Permalink to &quot;模块2：碰撞检测——判断“角色是否碰到墙”（15分钟）&quot;">​</a></h2><ul><li><strong>核心逻辑</strong>：用<code>player.collidelist(walls)</code>检测角色与墙壁的重叠，返回-1表示无碰撞，否则表示碰到第n面墙：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在移动逻辑后添加碰撞检测</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 先记录移动前的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">old_x, old_y </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> player.x, player.y</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 处理移动（上下左右）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> keys[pygame.</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">K_UP</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    player.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">-=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># （省略下、左、右移动代码）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 检测碰撞：如果碰到墙，就回到移动前的位置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> player.collidelist(walls) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    player.x, player.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> old_x, old_y  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 回退位置（不穿墙）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><strong>原理动画</strong>：播放矩形重叠动画，说明“当角色矩形和墙壁矩形有重叠时，就触发碰撞，禁止移动”。</li></ul><h2 id="模块3-关卡切换——从-简单-到-复杂-10分钟" tabindex="-1">模块3：关卡切换——从“简单”到“复杂”（10分钟） <a class="header-anchor" href="#模块3-关卡切换——从-简单-到-复杂-10分钟" aria-label="Permalink to &quot;模块3：关卡切换——从“简单”到“复杂”（10分钟）&quot;">​</a></h2><ul><li><strong>关卡数据封装</strong>：用函数定义不同关卡的墙壁，类比“换地图就是换一组墙壁数据”：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> get_level1_walls</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 第一关：外围墙+1个中间墙</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">580</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">380</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 中间竖墙</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> get_level2_walls</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 第二关：更复杂的墙壁（学生可自定义）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # ... 更多墙壁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><strong>切换逻辑</strong>：用变量<code>current_level</code>记录当前关卡，碰到终点时切换：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">current_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">walls </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> get_level1_walls()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始加载第一关</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在主循环中检测是否到达终点（假设终点是(500, 300)的矩形）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">end_zone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> pygame.Rect(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> player.colliderect(end_zone):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    current_level </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    walls </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> get_level2_walls()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换到第二关</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    player.x, player.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 重置角色位置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="三、练习题设计-分层任务-关卡创作-25分钟" tabindex="-1">三、练习题设计：分层任务+关卡创作（25分钟） <a class="header-anchor" href="#三、练习题设计-分层任务-关卡创作-25分钟" aria-label="Permalink to &quot;三、练习题设计：分层任务+关卡创作（25分钟）&quot;">​</a></h2><h2 id="基础任务-全员完成-不穿墙的迷宫" tabindex="-1">基础任务（全员完成）：“不穿墙的迷宫” <a class="header-anchor" href="#基础任务-全员完成-不穿墙的迷宫" aria-label="Permalink to &quot;基础任务（全员完成）：“不穿墙的迷宫”&quot;">​</a></h2><ul><li>要求：基于角色移动代码，添加4面外围墙（顶部、底部、左右侧），实现“角色碰到墙就无法移动”的效果。</li><li>关键步骤： <ol><li>定义<code>walls</code>列表（复制模块1的外围墙代码）；</li><li>在移动后添加碰撞检测（复制模块2的回退逻辑）；</li><li>绘制墙壁（在刷新画面时循环绘制）。</li></ol></li></ul><h2 id="进阶任务-选做-我的专属关卡" tabindex="-1">进阶任务（选做）：“我的专属关卡” <a class="header-anchor" href="#进阶任务-选做-我的专属关卡" aria-label="Permalink to &quot;进阶任务（选做）：“我的专属关卡”&quot;">​</a></h2><ul><li>选项1：添加1-2面中间墙（如<code>pygame.Rect(200, 100, 20, 200)</code>），调整位置让迷宫有“一条通路”；</li><li>选项2：设计终点区域（如红色矩形），到达后在屏幕上显示“通关啦！”（用<code>pygame.font</code>显示文字）；</li><li>选项3：实现两关卡切换（参考模块3代码，第一关简单，第二关增加墙壁）。</li></ul><h2 id="教师支持" tabindex="-1">教师支持： <a class="header-anchor" href="#教师支持" aria-label="Permalink to &quot;教师支持：&quot;">​</a></h2><ul><li>AI代码小助手提供“中间墙坐标计算”帮助（如“想在(200,100)加一面高200的墙，代码怎么写？”）；</li><li>发放“关卡设计 Checklist”（墙壁是否闭合、通路是否存在、终点位置是否合理）。</li></ul><h2 id="四、讲解与互评-从-能玩-到-好玩-10分钟" tabindex="-1">四、讲解与互评：从“能玩”到“好玩”（10分钟） <a class="header-anchor" href="#四、讲解与互评-从-能玩-到-好玩-10分钟" aria-label="Permalink to &quot;四、讲解与互评：从“能玩”到“好玩”（10分钟）&quot;">​</a></h2><ol><li><strong>功能测试</strong>：随机选3名学生演示代码，全班一起“玩”他们的迷宫，测试“是否穿墙”“能否到达终点”。</li><li><strong>关卡点评</strong>：从“难度合理性”“创意性”点评进阶任务，如“中间墙的位置让迷宫有了岔路，很有想法”。</li><li><strong>小组投票</strong>：评选“最想挑战的关卡”，作者获“关卡设计师”勋章。</li></ol><h2 id="五、总结与作业-5分钟" tabindex="-1">五、总结与作业（5分钟） <a class="header-anchor" href="#五、总结与作业-5分钟" aria-label="Permalink to &quot;五、总结与作业（5分钟）&quot;">​</a></h2><h2 id="课堂总结" tabindex="-1">课堂总结： <a class="header-anchor" href="#课堂总结" aria-label="Permalink to &quot;课堂总结：&quot;">​</a></h2><ul><li>墙壁=用<code>pygame.Rect</code>列表定义的“禁止区域”；</li><li>碰撞检测=通过<code>collidelist()</code>判断角色与墙壁是否重叠，重叠则回退位置；</li><li>关卡切换=用函数封装不同墙壁数据，通过条件触发切换。</li></ul><h2 id="课后作业" tabindex="-1">课后作业： <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;课后作业：&quot;">​</a></h2><ol><li>完善自己的迷宫关卡，至少包含5面墙和1个终点，截图记录“从起点到终点的路径”；</li><li>思考：“怎么让游戏有计分功能？（如移动步数越少，分数越高）”，下次课分享思路。</li></ol><h2 id="教学理论支撑" tabindex="-1">教学理论支撑： <a class="header-anchor" href="#教学理论支撑" aria-label="Permalink to &quot;教学理论支撑：&quot;">​</a></h2><ol><li><strong>自我决定理论</strong>：通过“自定义关卡”满足学生的自主性需求，“小组投票”增强胜任感，激发持续学习动机。</li><li><strong>维果茨基最近发展区</strong>：基础任务确保掌握核心逻辑（碰撞检测），进阶任务（多关卡、计分）挑战更高能力，教师通过Checklist提供针对性指导。</li><li><strong>STEAM教育融合</strong>：结合工程（关卡结构设计）、数学（坐标与矩形尺寸计算）、技术（Pygame进阶应用），培养系统思维与问题解决能力。</li></ol>`,35)])])}const c=i(h,[["render",e]]);export{y as __pageData,c as default};
