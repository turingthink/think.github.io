import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const u=JSON.parse('{"title":"列表与循环——批量处理数据的\\"高效工具\\"","description":"","frontmatter":{},"headers":[],"relativePath":"python/level-2/class05.md","filePath":"python/level-2/class05.md","lastUpdated":1761651013000}'),t={name:"python/level-2/class05.md"};function h(e,s,p,k,r,o){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="列表与循环——批量处理数据的-高效工具" tabindex="-1">列表与循环——批量处理数据的&quot;高效工具&quot; <a class="header-anchor" href="#列表与循环——批量处理数据的-高效工具" aria-label="Permalink to &quot;列表与循环——批量处理数据的&quot;高效工具&quot;&quot;">​</a></h1><h2 id="课题" tabindex="-1">课题 <a class="header-anchor" href="#课题" aria-label="Permalink to &quot;课题&quot;">​</a></h2><p>用循环遍历列表，计算统计量（平均分、最大值）</p><h2 id="教学时间" tabindex="-1">教学时间 <a class="header-anchor" href="#教学时间" aria-label="Permalink to &quot;教学时间&quot;">​</a></h2><p>2课时（90分钟）</p><h2 id="课前准备" tabindex="-1">课前准备 <a class="header-anchor" href="#课前准备" aria-label="Permalink to &quot;课前准备&quot;">​</a></h2><ul><li><strong>教师端</strong>：电脑（Python 3.10+）、投影仪、多媒体课件（含&quot;批量处理&quot;场景：老师统计全班成绩、超市计算日均销量）、实物道具（写有成绩的卡片若干、计算器）、数据统计表（班级模拟成绩表）。</li><li><strong>学生端</strong>：电脑（Python环境）、上节课的&quot;植物生长数据&quot;作业、笔记本、计算器（对比手动计算与代码结果）。</li><li><strong>教学素材</strong>：代码模板（循环遍历列表示例）、AI数据分析师（可生成简单统计代码）、奖励徽章（&quot;统计小能手&quot;）。</li></ul><h2 id="一、导入活动-从-手动统计-到-代码批量处理-15分钟" tabindex="-1">一、导入活动：从&quot;手动统计&quot;到&quot;代码批量处理&quot;（15分钟） <a class="header-anchor" href="#一、导入活动-从-手动统计-到-代码批量处理-15分钟" aria-label="Permalink to &quot;一、导入活动：从&quot;手动统计&quot;到&quot;代码批量处理&quot;（15分钟）&quot;">​</a></h2><h2 id="活动1-统计全班成绩-大挑战——发现-循环的必要性" tabindex="-1">活动1：&quot;统计全班成绩&quot;大挑战——发现&quot;循环的必要性&quot; <a class="header-anchor" href="#活动1-统计全班成绩-大挑战——发现-循环的必要性" aria-label="Permalink to &quot;活动1：&quot;统计全班成绩&quot;大挑战——发现&quot;循环的必要性&quot;&quot;">​</a></h2><ul><li>教师展示10名学生的成绩卡片（如<code>[85, 92, 78, 90, 88, 76, 95, 82, 89, 91]</code>），提问：&quot;怎么快速算出总分和平均分？&quot;</li><li>分组任务：1组用计算器逐个加（手动法），2组尝试找&quot;重复步骤&quot;（加第一个数→加第二个数→...→除以10）。</li><li>对比效率：手动组耗时较长，引出&quot;循环可以让代码重复执行同一操作，自动处理批量数据&quot;。</li></ul><h2 id="活动2-植物生长数据-回顾——关联旧知与新知" tabindex="-1">活动2：&quot;植物生长数据&quot;回顾——关联旧知与新知 <a class="header-anchor" href="#活动2-植物生长数据-回顾——关联旧知与新知" aria-label="Permalink to &quot;活动2：&quot;植物生长数据&quot;回顾——关联旧知与新知&quot;">​</a></h2><ul><li>回顾上节课作业：学生的<code>day3 = [4.2, 3.8, 5.1]</code>（豆芽高度），提问：&quot;怎么打印每颗豆芽的高度？&quot;</li><li>旧法：<code>print(day3[0]); print(day3[1]); print(day3[2])</code>（繁琐）；</li><li>新法预告：用<code>for</code>循环一句话搞定，如：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> day3:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(height)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>类比：&quot;就像老师点名时说&#39;请每个同学站起来&#39;，不用逐个叫名字——循环就是对列表&#39;每个元素&#39;说&#39;做这个操作&#39;。&quot;</li></ul><h2 id="二、知识点讲解-循环遍历列表与统计计算-35分钟" tabindex="-1">二、知识点讲解：循环遍历列表与统计计算（35分钟） <a class="header-anchor" href="#二、知识点讲解-循环遍历列表与统计计算-35分钟" aria-label="Permalink to &quot;二、知识点讲解：循环遍历列表与统计计算（35分钟）&quot;">​</a></h2><h2 id="模块1-for循环遍历列表——-逐个访问-元素-15分钟" tabindex="-1">模块1：<code>for</code>循环遍历列表——&quot;逐个访问&quot;元素（15分钟） <a class="header-anchor" href="#模块1-for循环遍历列表——-逐个访问-元素-15分钟" aria-label="Permalink to &quot;模块1：\`for\`循环遍历列表——&quot;逐个访问&quot;元素（15分钟）&quot;">​</a></h2><ul><li><strong>核心逻辑</strong>：<code>for 变量名 in 列表名:</code> 表示&quot;依次把列表中的每个元素赋值给变量，执行缩进内的操作&quot;。</li><li><strong>生活类比</strong>：&quot;就像分糖果，从盒子里（列表）拿出每一颗糖（元素），给每个同学（变量）——循环结束，每个同学都拿到了糖。&quot;</li><li><strong>基础语法</strong>（代码演示+步骤拆解）：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例：遍历成绩列表，打印每个成绩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">92</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> scores:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># s依次代表85、92、78</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;成绩：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, s)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 对每个s执行打印操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 成绩：85</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 成绩：92</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 成绩：78</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><strong>互动练习</strong>：学生用自己的&quot;家庭成员年龄列表&quot;（如<code>ages = [38, 36, 12]</code>），用循环打印&quot;XX的年龄是XX岁&quot;。</li></ul><h2 id="模块2-计算总分与平均分——循环的-累加应用-15分钟" tabindex="-1">模块2：计算总分与平均分——循环的&quot;累加应用&quot;（15分钟） <a class="header-anchor" href="#模块2-计算总分与平均分——循环的-累加应用-15分钟" aria-label="Permalink to &quot;模块2：计算总分与平均分——循环的&quot;累加应用&quot;（15分钟）&quot;">​</a></h2><ul><li><strong>累加逻辑</strong>：用一个变量（如<code>total</code>）存储累加结果，循环中每次加上列表元素。</li><li><strong>示例：计算成绩平均分</strong>：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">92</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 初始化总分（累加容器）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> scores:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> s  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每次加一个成绩（total = 0+85 → 85+92 → ...）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">average </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(scores)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># len(scores)获取列表长度（4）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;总分：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, total)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：345</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;平均分：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, average)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：86.25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><strong>关键函数</strong>：<code>len(列表名)</code>返回列表元素个数（如<code>len(scores)</code>=4），避免手动数元素（尤其大数据量时）。</li></ul><h2 id="模块3-找最大值-最小值——循环的-比较应用-5分钟" tabindex="-1">模块3：找最大值/最小值——循环的&quot;比较应用&quot;（5分钟） <a class="header-anchor" href="#模块3-找最大值-最小值——循环的-比较应用-5分钟" aria-label="Permalink to &quot;模块3：找最大值/最小值——循环的&quot;比较应用&quot;（5分钟）&quot;">​</a></h2><ul><li><strong>逻辑</strong>：假设第一个元素是最大值，循环中用每个元素与之比较，更大则更新。</li><li><strong>示例：找最高豆芽高度</strong>：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">heights </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">4.2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">3.8</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">5.1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">max_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> heights[</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设第一个是最大的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> heights:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> max_h:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果当前元素更大</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        max_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> h  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新最大值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;最高高度：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, max_h)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：5.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="三、练习题设计-从-统计-到-分析-25分钟" tabindex="-1">三、练习题设计：从&quot;统计&quot;到&quot;分析&quot;（25分钟） <a class="header-anchor" href="#三、练习题设计-从-统计-到-分析-25分钟" aria-label="Permalink to &quot;三、练习题设计：从&quot;统计&quot;到&quot;分析&quot;（25分钟）&quot;">​</a></h2><h2 id="基础任务-全员完成-班级成绩分析器" tabindex="-1">基础任务（全员完成）：&quot;班级成绩分析器&quot; <a class="header-anchor" href="#基础任务-全员完成-班级成绩分析器" aria-label="Permalink to &quot;基础任务（全员完成）：&quot;班级成绩分析器&quot;&quot;">​</a></h2><ul><li>提供班级5名学生的数学成绩列表（如<code>math_scores = [90, 85, 95, 78, 88]</code>），要求： <ol><li>用循环打印每个成绩；</li><li>计算总分和平均分；</li><li>找出最高分。</li></ol></li><li>示例框架：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">math_scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">95</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">88</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 打印每个成绩</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> math_scores:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;数学成绩：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, score)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 计算总分和平均分</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> math_scores:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> s  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等同于total = total + s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">average </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(math_scores)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;总分：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, total, </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;平均分：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, average)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 找最高分（学生自主完成）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h2 id="进阶任务-选做-植物生长对比分析" tabindex="-1">进阶任务（选做）：&quot;植物生长对比分析&quot; <a class="header-anchor" href="#进阶任务-选做-植物生长对比分析" aria-label="Permalink to &quot;进阶任务（选做）：&quot;植物生长对比分析&quot;&quot;">​</a></h2><ul><li>用两天的豆芽数据（<code>day3 = [4.2, 3.8, 5.1]</code>，<code>day4 = [5.0, 4.5, 5.8]</code>），要求： <ol><li>计算每颗豆芽的生长增量（day4 - day3）；</li><li>找出增量最大的豆芽（哪颗长得最快）。</li></ol></li><li>提示：用<code>for i in range(len(day3))</code>获取索引，同时访问两天的数据（<code>day3[i]</code>和<code>day4[i]</code>）。</li></ul><h2 id="教师支持" tabindex="-1">教师支持： <a class="header-anchor" href="#教师支持" aria-label="Permalink to &quot;教师支持：&quot;">​</a></h2><ul><li>AI数据分析师可生成&quot;计算平均分&quot;的代码模板，学生需补充注释说明步骤；</li><li>提供&quot;累加流程图&quot;（初始化→循环加→计算平均），帮助理解逻辑。</li></ul><h2 id="四、讲解与互评-从-计算-到-意义-10分钟" tabindex="-1">四、讲解与互评：从&quot;计算&quot;到&quot;意义&quot;（10分钟） <a class="header-anchor" href="#四、讲解与互评-从-计算-到-意义-10分钟" aria-label="Permalink to &quot;四、讲解与互评：从&quot;计算&quot;到&quot;意义&quot;（10分钟）&quot;">​</a></h2><ol><li><strong>逻辑拆解</strong>：选1份作业投屏，学生讲解&quot;计算平均分的代码中，<code>total</code>变量的变化过程&quot;（如0→90→175→270→...），强化对循环累加的理解。</li><li><strong>数据解读</strong>：结合&quot;植物生长增量&quot;，讨论&quot;为什么第3颗豆芽长得最快？&quot;（关联科学课的光照/水分因素），让数据统计服务于实际分析。</li><li><strong>互评重点</strong>：代码逻辑是否清晰（变量名是否易懂，如<code>max_h</code>比<code>a</code>更好）、统计结果是否正确，用计算器验证。</li></ol><h2 id="五、总结与作业-5分钟" tabindex="-1">五、总结与作业（5分钟） <a class="header-anchor" href="#五、总结与作业-5分钟" aria-label="Permalink to &quot;五、总结与作业（5分钟）&quot;">​</a></h2><h2 id="课堂总结" tabindex="-1">课堂总结： <a class="header-anchor" href="#课堂总结" aria-label="Permalink to &quot;课堂总结：&quot;">​</a></h2><ul><li><code>for 变量 in 列表:</code> 可循环访问每个元素，避免重复代码；</li><li>累加统计：用<code>total = 0</code>初始化，循环中<code>total += 元素</code>；</li><li>列表长度用<code>len(列表)</code>获取，最大值/最小值通过循环比较获得。</li></ul><h2 id="课后作业" tabindex="-1">课后作业： <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;课后作业：&quot;">​</a></h2><ol><li>统计家里3天的用电量（单位：度），用列表存储，计算平均用电量并打印&quot;哪天用电最多&quot;；</li><li>预习：如果列表中有负数（如温度数据<code>[-5, 3, -2]</code>），怎么找最小值？尝试修改最大值代码。</li></ol><h2 id="教学理论支撑" tabindex="-1">教学理论支撑： <a class="header-anchor" href="#教学理论支撑" aria-label="Permalink to &quot;教学理论支撑：&quot;">​</a></h2><ol><li><strong>自我决定理论</strong>：通过&quot;班级成绩&quot;&quot;家庭用电&quot;等真实数据任务，满足学生的&quot;胜任感&quot;（能解决实际问题）和&quot;关联性&quot;（数据与生活相关），激发内在学习动机。</li><li><strong>STEAM教育工程思维</strong>：将&quot;统计数据&quot;视为&quot;工程任务&quot;，拆解为&quot;遍历→累加→计算&quot;步骤，培养系统分析与问题解决能力，融合数学（统计计算）、科学（数据解读）。</li><li><strong>建构主义学习观</strong>：让学生在&quot;手动统计→发现低效→用循环优化&quot;的过程中，自主建构&quot;循环批量处理数据&quot;的认知，而非被动接受知识点。</li></ol>`,35)])])}const g=i(t,[["render",h]]);export{u as __pageData,g as default};
