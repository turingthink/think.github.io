import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const c=JSON.parse('{"title":"KEY","description":"","frontmatter":{},"headers":[],"relativePath":"arduino/7.key.md","filePath":"arduino/7.key.md","lastUpdated":1761651013000}'),p={name:"arduino/7.key.md"};function e(h,s,k,t,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="key" tabindex="-1">KEY <a class="header-anchor" href="#key" aria-label="Permalink to &quot;KEY&quot;">​</a></h1><h2 id="硬件连接" tabindex="-1">硬件连接 <a class="header-anchor" href="#硬件连接" aria-label="Permalink to &quot;硬件连接&quot;">​</a></h2><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> 接线说明：按键模块--&gt;ESP32 IO</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">         (K1-K4)--&gt;(14,27,26,25)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">         </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">         LED模块--&gt;ESP32 IO</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">         (D1-D4)--&gt;(15,2,0,4)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="软件实现" tabindex="-1">软件实现 <a class="header-anchor" href="#软件实现" aria-label="Permalink to &quot;软件实现&quot;">​</a></h2><h3 id="_1-实现第一个-key-io25-控制-一个-led-io5-灯" tabindex="-1">1. 实现第一个 key IO25 控制 一个 LED IO5 灯. <a class="header-anchor" href="#_1-实现第一个-key-io25-控制-一个-led-io5-灯" aria-label="Permalink to &quot;1. 实现第一个 key IO25 控制 一个 LED IO5 灯.&quot;">​</a></h3><details class="details custom-block"><summary>key 控制一个LED 代码</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//引脚输出低电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">      digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //引脚输出高电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></details><h3 id="_2-如果实现按一个-key-键-led-亮-再按一个-key-键-led-灭" tabindex="-1">2. 如果实现按一个 key 键, LED 亮, 再按一个 key 键, LED 灭. <a class="header-anchor" href="#_2-如果实现按一个-key-键-led-亮-再按一个-key-键-led-灭" aria-label="Permalink to &quot;2. 如果实现按一个 key 键, LED 亮, 再按一个 key 键, LED 灭.&quot;">​</a></h3><details class="details custom-block"><summary>key 控制一个LED 代码</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//引脚输出低电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">    digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,status);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //引脚输出高电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></details><h3 id="_3-去掉毛刺" tabindex="-1">3. 去掉毛刺 <a class="header-anchor" href="#_3-去掉毛刺" aria-label="Permalink to &quot;3. 去掉毛刺&quot;">​</a></h3><details class="details custom-block"><summary>key 控制一个LED 代码</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//引脚输出低电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(flag) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">      digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,status);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //引脚输出高电平</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></details><h2 id="中断" tabindex="-1">中断 <a class="header-anchor" href="#中断" aria-label="Permalink to &quot;中断&quot;">​</a></h2><p>使用 ESP32，我们可以将所有 GPIO 引脚配置为硬件中断源。我们可以通过将这些 GPIO 引脚连接到相应的 ISR 来启用中断。</p><h3 id="中断处理函数-isr" tabindex="-1">中断处理函数 (ISR) <a class="header-anchor" href="#中断处理函数-isr" aria-label="Permalink to &quot;中断处理函数 (ISR)&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> IRAM_ATTR </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">isr_key</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//引脚输出低电平</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  attachInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalPinToInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1), isr_key, FALLING);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="实现中断" tabindex="-1">实现中断 <a class="header-anchor" href="#实现中断" aria-label="Permalink to &quot;实现中断&quot;">​</a></h3><p>在 Arduino IDE 中，我们使用一个函数调用attachInterrupt()来逐个引脚设置中断。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> attachInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> pin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">intRoutine</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> mode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li>pin：要配置为中断的引脚 (GPIO Pin)。</li><li>intRoutine：中断处理程序的函数指针 (ISR)。</li><li>mode：中断模式。</li></ul><table tabindex="0"><thead><tr><th>Mode</th><th>说明</th></tr></thead><tbody><tr><td>LOW 底的</td><td>每当引脚为低电平时触发中断</td></tr><tr><td>HIGHT 高的</td><td>每当引脚为高电平时触发中断</td></tr><tr><td>CHANGE 改变</td><td>每当引脚改变值时触发中断，从 HIGH 到 LOW 或 LOW 到 HIGH</td></tr><tr><td>FALLING 坠落</td><td>当引脚从 HIGH 变为 LOW 时触发中断</td></tr><tr><td>RISING 上升</td><td>当引脚从 LOW 变为 HIGH 时触发中断</td></tr></tbody></table><h3 id="关闭中断" tabindex="-1">关闭中断 <a class="header-anchor" href="#关闭中断" aria-label="Permalink to &quot;关闭中断&quot;">​</a></h3><p>当您不再希望 ESP32 监控某个引脚时，您可以选择调用 <code>detachInterrupt()</code> 函数.</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> detachInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> pin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li>pin：要配置为中断的引脚 (GPIO Pin)。</li></ul><h3 id="gpio中断针脚配置-gpio-pin" tabindex="-1">GPIO中断针脚配置 (GPIO Pin) <a class="header-anchor" href="#gpio中断针脚配置-gpio-pin" aria-label="Permalink to &quot;GPIO中断针脚配置 (GPIO Pin)&quot;">​</a></h3><p>digitalPinToInterrupt 是一个宏定义，该函数将使用的引脚编号转换为相应的内部中断编号。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> digitalPinToInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)    (((p)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(p)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:-</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="中断函数" tabindex="-1">中断函数 <a class="header-anchor" href="#中断函数" aria-label="Permalink to &quot;中断函数&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> IRAM_ATTR </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// doing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="什么是-iram-attr" tabindex="-1">什么是 IRAM_ATTR？ <a class="header-anchor" href="#什么是-iram-attr" aria-label="Permalink to &quot;什么是 IRAM_ATTR？&quot;">​</a></h4><p>通过使用属性标记一段代码，IRAM_ATTR我们声明编译后的代码将放置在 ESP32 的内部 RAM (IRAM) 中。</p><p>否则，代码将放在 Flash 中。ESP32 上的闪存比内部 RAM 慢得多。</p><p>如果我们要运行的代码是中断服务程序（ISR），我们通常希望尽快执行它。如果我们不得不“等待”从闪存加载 ISR，事情就会大错特错。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Forces code into IRAM instead of flash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> IRAM_ATTR</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> _SECTION_ATTR_IMPL</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;.iram1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">__COUNTER__</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>IRAM_ATTR</code> 是一个预处理宏，这意味着它可以在编译期间扩展到几乎任何东西，包括一个空字符串。</p><h4 id="它是如何工作的" tabindex="-1">它是如何工作的 <a class="header-anchor" href="#它是如何工作的" aria-label="Permalink to &quot;它是如何工作的&quot;">​</a></h4><p>从概念上讲，它为每个函数提供了一个名为&quot;iram1“的变量，该变量具有唯一的数字。<code>__COUNTER__</code> 提供的数字仅用于满足值的要求。然后，链接器脚本可以在编译的后期阶段在某些函数上检测到这个变量，并更改将其格式化为最终二进制文件的方式。</p><h4 id="为什么使用它" tabindex="-1">为什么使用它？ <a class="header-anchor" href="#为什么使用它" aria-label="Permalink to &quot;为什么使用它？&quot;">​</a></h4><p>IRAM_ATTR 是一个 ESP32 的特殊属性，用于指定函数在 IRAM（内部 RAM）中运行，而不是默认的闪存（Flash）中运行。在 ESP32 中，IRAM 是位于处理器内部的高速随机访问存储器，执行速度更快。</p><p>使用 IRAM_ATTR 属性可以将函数加载到 IRAM 中，从而提高函数的执行速度和响应性能。在中断服务程序（ISR）中使用 IRAM_ATTR 属性可以确保 ISR 在最短的时间内得到执行，从而更及时地响应中断事件。</p><p>因此，IRAM_ATTR 修饰符常常用于将中断服务程序（ISR）函数加载到 IRAM 中，以提高性能。</p><ul><li>可以参考官方文档中 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/spi_flash/spi_flash_concurrency.html#iram-safe-interrupt-handlers" target="_blank" rel="noreferrer">IRAM 安全中断处理程序</a></li></ul><h3 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h3><p>使用中断实现一个按键控制一个LED闪烁, 当按下一个按键, LED 闪烁, 再按下一个按键, LED 灭.</p><details class="details custom-block"><summary>思考题 答案</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> starLed</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> IRAM_ATTR </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">isr_key</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //引脚输出低电平</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  attachInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalPinToInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1), isr_key, FALLING);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(status){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">    starLed</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">    close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div></details><h2 id="定时器中断" tabindex="-1">定时器中断 <a class="header-anchor" href="#定时器中断" aria-label="Permalink to &quot;定时器中断&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">hw_timer_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">timer0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定时器中断函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> time0_isr</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, status);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定时器初始化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//per：定时时间，单位us</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> timeInit</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> per</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* timerBegin：初始化定时器指针</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    第一个参数：设置定时器0（一共有四个定时器0、1、2、3）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    第二个参数：80分频（设置APB时钟，ESP32主频80MHz），80则时间单位为1Mhz即1us，1000000us即1s。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    第三个参数：计数方式，true向上计数 false向下计数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  timer0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> timerBegin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* timerAlarmWrite：配置报警计数器保护值（就是设置时间）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第一个参数：指向已初始化定时器的指针</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第二个参数：定时时间，这里为500000us  意思为0.5s进入一次中断</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第三个参数：是否重载，false定时器中断触发一次  true：死循环</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  timerAlarmWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(timer0, per, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* timerAttachInterrupt：绑定定时器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第一个参数：指向已初始化定时器的指针</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第二个参数：中断服务器函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     第三个参数：true边沿触发，false电平触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  timerAttachInterrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(timer0, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">time0_isr, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">); </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  timerAlarmEnable</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(timer0);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//启用定时器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //timerDetachInterrupt(timer0);//关闭定时器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //引脚输出低电平</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  timeInit</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">500000</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>`,48)])])}const y=i(p,[["render",e]]);export{c as __pageData,y as default};
