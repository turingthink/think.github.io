import{j as s,c as i,b as l,ag as n}from"./chunks/framework.CPnt7f93.js";const k=JSON.parse('{"title":"入门基础","description":"","frontmatter":{},"headers":[],"relativePath":"c++/level-1/01.base.md","filePath":"c++/level-1/01.base.md","lastUpdated":1761651013000}'),e={name:"c++/level-1/01.base.md"};function t(h,a,r,p,o,d){return l(),i("div",null,[...a[0]||(a[0]=[n(`<h1 id="入门基础" tabindex="-1">入门基础 <a class="header-anchor" href="#入门基础" aria-label="Permalink to &quot;入门基础&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#知识点">知识点</a></li><li><a href="#c-and-c-语言介绍">C and C++ 语言介绍</a></li><li><a href="#_1-程序基本概念">1. 程序基本概念</a></li><li><a href="#实现自己的介绍">实现自己的介绍</a><ul><li><a href="#程序实现">程序实现</a></li></ul></li><li><a href="#练习">练习</a><ul><li><a href="#_1-1-标识符、关键字、常量、变量、字符串、表达式的概念">1.1 标识符、关键字、常量、变量、字符串、表达式的概念.</a></li><li><a href="#_1-2-常量与变量的命名、定义及作用">1.2 常量与变量的命名、定义及作用</a></li><li><a href="#_1-3-头文件与命名空间的概念">1.3 头文件与命名空间的概念</a></li><li><a href="#_1-4-编辑、编译、解释、调试的概念">1.4 编辑、编译、解释、调试的概念</a></li></ul></li><li><a href="#_2-基本数据类型">2. 基本数据类型</a><ul><li><a href="#_2-1-整数型-int、long-long">2.1 整数型: int、long long</a></li><li><a href="#_2-2-实数型-float、double">2.2 实数型: float、double</a></li><li><a href="#_2-3-字符型-char">2.3 字符型: char</a></li><li><a href="#_2-4-布尔型-bool">2.4 布尔型: bool</a></li></ul></li></ul></nav><h3 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h3><ol><li>了解C++语言</li><li>熟练的掌握并能使用 <code>cout</code> 和 <code>cin</code> .</li></ol><h2 id="c-and-c-语言介绍" tabindex="-1">C and C++ 语言介绍 <a class="header-anchor" href="#c-and-c-语言介绍" aria-label="Permalink to &quot;C and C++ 语言介绍&quot;">​</a></h2><p>C 语言是一种通用的高级语言，最初是由丹尼斯·里奇在贝尔实验室为开发 UNIX 操作系统而设计的。C 语言最开始是于 1972 年在 DEC PDP-11 计算机上被首次实现。</p><p>在 1978 年，布莱恩·柯林汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）制作了 C 的第一个公开可用的描述，现在被称为 K&amp;R 标准。UNIX 操作系统，C编译器，和几乎所有的 UNIX 应用程序都是用 C 语言编写的。由于各种原因，C 语言现在已经成为一种广泛使用的专业语言。</p><p>由于C++在C语言的基础上移植了新的编程理念，因此我们首先来 看一看C所遵循的旧的理念。一般来说，计算机语言要处理两个概念 ——数据和算法。数据是程序使用和处理的信息，而算法是程序使用的方法(参见图1.1)。C语言与当前最主流的语言一样，在最初面世时也 是过程性(procedural)语言，这意味着它强调的是编程的算法方面。 从概念上说，过程化编程首先要确定计算机应采取的操作，然后使用编 程语言来实现这些操作。程序命令计算机按一系列流程生成特定的结 果，就像菜谱指定了厨师做蛋糕时应遵循的一系列步骤一样。</p><h2 id="_1-程序基本概念" tabindex="-1">1. 程序基本概念 <a class="header-anchor" href="#_1-程序基本概念" aria-label="Permalink to &quot;1. 程序基本概念&quot;">​</a></h2><p>首先介绍一个显示 <code>Hello wrold</code>! 的简单C++程序。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;Hello world!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="实现自己的介绍" tabindex="-1">实现自己的介绍 <a class="header-anchor" href="#实现自己的介绍" aria-label="Permalink to &quot;实现自己的介绍&quot;">​</a></h2><p>让同学每个人都自我介绍一下自己. 主要以下面的几个方面介绍.</p><ol><li>姓名</li><li>年龄</li><li>职业</li><li>教几年级/上几年级</li></ol><h3 id="程序实现" tabindex="-1">程序实现 <a class="header-anchor" href="#程序实现" aria-label="Permalink to &quot;程序实现&quot;">​</a></h3><p>代码:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;李飞&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;12&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;小学3年级&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上代码, 实现我们的自我介绍. 但是如果我们想让程序更加实用更加灵活, 怎么办?</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><p>编写家庭成员的介绍, 从以下几个方面介绍.</p><ol><li>姓名</li><li>关系</li><li>年龄</li></ol><h3 id="_1-1-标识符、关键字、常量、变量、字符串、表达式的概念" tabindex="-1">1.1 标识符、关键字、常量、变量、字符串、表达式的概念. <a class="header-anchor" href="#_1-1-标识符、关键字、常量、变量、字符串、表达式的概念" aria-label="Permalink to &quot;1.1 标识符、关键字、常量、变量、字符串、表达式的概念.&quot;">​</a></h3><h3 id="_1-2-常量与变量的命名、定义及作用" tabindex="-1">1.2 常量与变量的命名、定义及作用 <a class="header-anchor" href="#_1-2-常量与变量的命名、定义及作用" aria-label="Permalink to &quot;1.2 常量与变量的命名、定义及作用&quot;">​</a></h3><h3 id="_1-3-头文件与命名空间的概念" tabindex="-1">1.3 头文件与命名空间的概念 <a class="header-anchor" href="#_1-3-头文件与命名空间的概念" aria-label="Permalink to &quot;1.3 头文件与命名空间的概念&quot;">​</a></h3><h3 id="_1-4-编辑、编译、解释、调试的概念" tabindex="-1">1.4 编辑、编译、解释、调试的概念 <a class="header-anchor" href="#_1-4-编辑、编译、解释、调试的概念" aria-label="Permalink to &quot;1.4 编辑、编译、解释、调试的概念&quot;">​</a></h3><h2 id="_2-基本数据类型" tabindex="-1">2. 基本数据类型 <a class="header-anchor" href="#_2-基本数据类型" aria-label="Permalink to &quot;2. 基本数据类型&quot;">​</a></h2><h3 id="_2-1-整数型-int、long-long" tabindex="-1">2.1 整数型: <code>int</code>、<code>long long</code> <a class="header-anchor" href="#_2-1-整数型-int、long-long" aria-label="Permalink to &quot;2.1 整数型: \`int\`、\`long long\`&quot;">​</a></h3><h3 id="_2-2-实数型-float、double" tabindex="-1">2.2 实数型: <code>float</code>、<code>double</code> <a class="header-anchor" href="#_2-2-实数型-float、double" aria-label="Permalink to &quot;2.2 实数型: \`float\`、\`double\`&quot;">​</a></h3><h3 id="_2-3-字符型-char" tabindex="-1">2.3 字符型: <code>char</code> <a class="header-anchor" href="#_2-3-字符型-char" aria-label="Permalink to &quot;2.3 字符型: \`char\`&quot;">​</a></h3><h3 id="_2-4-布尔型-bool" tabindex="-1">2.4 布尔型: <code>bool</code> <a class="header-anchor" href="#_2-4-布尔型-bool" aria-label="Permalink to &quot;2.4 布尔型: \`bool\`&quot;">​</a></h3>`,30)])])}const u=s(e,[["render",t]]);export{k as __pageData,u as default};
