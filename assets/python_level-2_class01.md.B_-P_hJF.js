import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const c=JSON.parse('{"title":"函数：代码的“乐高积木”与图形工具库","description":"","frontmatter":{},"headers":[],"relativePath":"python/level-2/class01.md","filePath":"python/level-2/class01.md","lastUpdated":1761651013000}'),e={name:"python/level-2/class01.md"};function t(h,s,p,r,k,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="函数-代码的-乐高积木-与图形工具库" tabindex="-1">函数：代码的“乐高积木”与图形工具库 <a class="header-anchor" href="#函数-代码的-乐高积木-与图形工具库" aria-label="Permalink to &quot;函数：代码的“乐高积木”与图形工具库&quot;">​</a></h1><h2 id="课题" tabindex="-1">课题 <a class="header-anchor" href="#课题" aria-label="Permalink to &quot;课题&quot;">​</a></h2><p>函数的“模块化魔法”——用Python函数打造专属图形工具库</p><h2 id="教学时间" tabindex="-1">教学时间 <a class="header-anchor" href="#教学时间" aria-label="Permalink to &quot;教学时间&quot;">​</a></h2><p>2课时（90分钟）</p><h2 id="课前准备" tabindex="-1">课前准备 <a class="header-anchor" href="#课前准备" aria-label="Permalink to &quot;课前准备&quot;">​</a></h2><ul><li><strong>教师端</strong>：电脑（Python 3.10+）、投影仪、多媒体课件（含乐高积木拼搭视频、函数结构类比图）、“函数卡片”（正面写函数名如<code>draw_square</code>，背面写参数<code>size</code>）、学生前序课的turtle绘图代码（如重复画正方形的冗余代码）。</li><li><strong>学生端</strong>：电脑（Python环境+ turtle库）、笔记本、彩色笔（标注函数结构）、“函数设计表”（记录函数名、参数、功能）。</li><li><strong>教学素材</strong>：函数模板代码（提前发放）、“模块小能手”奖章、AI代码小助手（支持函数调试提示）。</li></ul><h2 id="一、导入活动-从-重复劳动-到-模块化思维-15分钟" tabindex="-1">一、导入活动：从“重复劳动”到“模块化思维”（15分钟） <a class="header-anchor" href="#一、导入活动-从-重复劳动-到-模块化思维-15分钟" aria-label="Permalink to &quot;一、导入活动：从“重复劳动”到“模块化思维”（15分钟）&quot;">​</a></h2><h2 id="活动1-复制粘贴大挑战-——体验代码冗余的痛点" tabindex="-1">活动1：“复制粘贴大挑战”——体验代码冗余的痛点 <a class="header-anchor" href="#活动1-复制粘贴大挑战-——体验代码冗余的痛点" aria-label="Permalink to &quot;活动1：“复制粘贴大挑战”——体验代码冗余的痛点&quot;">​</a></h2><ul><li>任务：用前序课学的turtle代码，画3个不同大小的正方形（边长分别为50、80、100），限时5分钟。</li><li>观察现象：学生需重复编写<code>for i in range(4): turtle.forward(50); turtle.right(90)</code>三次，仅修改数字，过程繁琐。</li><li>提问引导：“如果要画10个正方形，每次都复制粘贴吗？有没有更简单的方法？”</li></ul><h2 id="活动2-乐高积木拼搭-——类比函数的核心价值" tabindex="-1">活动2：“乐高积木拼搭”——类比函数的核心价值 <a class="header-anchor" href="#活动2-乐高积木拼搭-——类比函数的核心价值" aria-label="Permalink to &quot;活动2：“乐高积木拼搭”——类比函数的核心价值&quot;">​</a></h2><ul><li>播放乐高拼车视频：“拼10辆小车，不需要每次从头拼轮子、车身，而是用预制的轮子积木、车身积木组合——函数就像预制积木，定义一次，反复使用。”</li><li>展示“函数卡片”：“<code>draw_square</code>就像‘正方形积木’，<code>size</code>是积木的‘大小参数’，需要多大就调多大，不用重复造轮子。”</li></ul><h2 id="二、知识点讲解-函数的定义与图形工具库搭建-35分钟" tabindex="-1">二、知识点讲解：函数的定义与图形工具库搭建（35分钟） <a class="header-anchor" href="#二、知识点讲解-函数的定义与图形工具库搭建-35分钟" aria-label="Permalink to &quot;二、知识点讲解：函数的定义与图形工具库搭建（35分钟）&quot;">​</a></h2><h2 id="模块1-函数是什么-——从-重复代码-到-封装逻辑-10分钟" tabindex="-1">模块1：函数是什么？——从“重复代码”到“封装逻辑”（10分钟） <a class="header-anchor" href="#模块1-函数是什么-——从-重复代码-到-封装逻辑-10分钟" aria-label="Permalink to &quot;模块1：函数是什么？——从“重复代码”到“封装逻辑”（10分钟）&quot;">​</a></h2><ul><li><strong>核心概念</strong>：函数是“封装重复逻辑的代码块”，定义一次后可通过“函数名”反复调用，解决“代码冗余”问题。</li><li><strong>生活类比</strong>： <ul><li>妈妈做蛋糕的“配方”=函数（步骤固定）；</li><li>配方中的“糖50g/80g”=参数（可调整的量）；</li><li>按配方做蛋糕=调用函数（重复使用配方，只需改糖的量）。</li></ul></li><li><strong>前序代码对比</strong>：<br> 冗余版（重复3次）：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 画边长50的正方形</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    turtle.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    turtle.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 画边长80的正方形（重复代码，仅改数字）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    turtle.forward(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    turtle.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>函数版（定义1次，调用3次）：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> draw_square</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(size):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 定义函数（配方）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        turtle.forward(size)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># size=参数（糖的量）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        turtle.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_square(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用函数（做50g糖的蛋糕）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_square(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 再次调用（做80g糖的蛋糕）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="模块2-函数的-身份证-——定义格式与参数-15分钟" tabindex="-1">模块2：函数的“身份证”——定义格式与参数（15分钟） <a class="header-anchor" href="#模块2-函数的-身份证-——定义格式与参数-15分钟" aria-label="Permalink to &quot;模块2：函数的“身份证”——定义格式与参数（15分钟）&quot;">​</a></h2><ul><li><p><strong>函数定义“四要素”</strong>（结合“函数卡片”讲解）：</p><ol><li><code>def</code>：定义函数的“关键词”（告诉Python“这是一个函数”）；</li><li>函数名：如<code>draw_square</code>（见名知意，用小写+下划线，符合PEP8规范）；</li><li>参数：括号里的<code>size</code>（像“变量”，调用时传入具体值，控制函数行为）；</li><li>冒号与缩进：<code>:</code>后换行缩进4格，包裹函数内部逻辑（Python用缩进来区分代码块）。</li></ol><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(参数1, 参数2):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 格式模板</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 函数内部逻辑（缩进！）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    代码1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    代码2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>参数的作用</strong>：让函数“变灵活”。举例：</p><ul><li>无参数函数：<code>def draw_small_square():</code> 只能画固定大小（如50），不灵活；</li><li>有参数函数：<code>def draw_square(size):</code> 传入<code>size=30</code>画小正方形，<code>size=100</code>画大正方形，一函数多用。</li></ul></li><li><p><strong>动手实践</strong>：教师演示定义<code>draw_triangle(side_length)</code>函数（画等边三角形，每次右转120度），学生跟着敲代码：</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> draw_triangle</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(side_length):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">):  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 三角形3条边</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        turtle.forward(side_length)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        turtle.right(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等边三角形每个角60度，右转120度</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用函数画2个三角形</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_triangle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.penup()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 抬笔（不画线）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 移动到新位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.pendown()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 落笔</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_triangle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h2 id="模块3-打造-图形工具库-——函数的复用与组合-10分钟" tabindex="-1">模块3：打造“图形工具库”——函数的复用与组合（10分钟） <a class="header-anchor" href="#模块3-打造-图形工具库-——函数的复用与组合-10分钟" aria-label="Permalink to &quot;模块3：打造“图形工具库”——函数的复用与组合（10分钟）&quot;">​</a></h2><ul><li><strong>工具库概念</strong>：把多个图形函数（正方形、三角形、圆形）放在同一个代码文件中，像“工具箱”一样随用随取。</li><li><strong>组合示例</strong>：用<code>draw_square</code>和<code>draw_triangle</code>组合成“房子”：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先画正方形（房子主体）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_square(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 再画三角形（屋顶），移动到合适位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 移动到正方形顶部</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_triangle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 三角形底边与正方形边长一致</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><strong>优势总结</strong>： <ul><li>减少重复代码（“一次定义，多次调用”）；</li><li>便于修改（改函数内部代码，所有调用处自动生效）；</li><li>逻辑清晰（每个函数负责一个功能，像乐高积木分工明确）。</li></ul></li></ul><h2 id="三、练习题设计-分层任务-工具库创作-25分钟" tabindex="-1">三、练习题设计：分层任务+工具库创作（25分钟） <a class="header-anchor" href="#三、练习题设计-分层任务-工具库创作-25分钟" aria-label="Permalink to &quot;三、练习题设计：分层任务+工具库创作（25分钟）&quot;">​</a></h2><h2 id="基础任务-全员完成-我的第一套工具" tabindex="-1">基础任务（全员完成）：“我的第一套工具” <a class="header-anchor" href="#基础任务-全员完成-我的第一套工具" aria-label="Permalink to &quot;基础任务（全员完成）：“我的第一套工具”&quot;">​</a></h2><ul><li>要求：定义至少2个图形函数（如<code>draw_circle(radius)</code>、<code>draw_rectangle(length, width)</code>），每个函数必须包含参数，调用3次生成不同大小的图形。</li><li>示例框架（圆形函数）：<div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> turtle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> draw_circle</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(radius):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    turtle.circle(radius)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># turtle库自带画圆函数，radius=半径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用3次，画不同大小的圆</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_circle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.penup()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.goto(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">turtle.pendown()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">draw_circle(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 第3次调用自己设计位置和大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">____________________</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h2 id="进阶任务-选做-组合图形创作" tabindex="-1">进阶任务（选做）：“组合图形创作” <a class="header-anchor" href="#进阶任务-选做-组合图形创作" aria-label="Permalink to &quot;进阶任务（选做）：“组合图形创作”&quot;">​</a></h2><ul><li>用基础任务定义的函数，组合成一个场景（如“花园”=圆形花朵+长方形花盆+三角形叶子），并在代码中用注释说明“哪个函数对应哪个部分”。</li></ul><h2 id="教师支持" tabindex="-1">教师支持： <a class="header-anchor" href="#教师支持" aria-label="Permalink to &quot;教师支持：&quot;">​</a></h2><ul><li>打开AI代码小助手，学生可提问“怎么让函数画彩色图形？”“参数传负数会怎样？”，AI生成带注释的参考代码（如添加<code> turtle.color(&quot;red&quot;)</code>）；</li><li>发放“函数设计表”，引导学生记录：<table tabindex="0"><thead><tr><th>函数名</th><th>参数</th><th>功能描述</th><th>调用示例</th></tr></thead><tbody><tr><td><code>draw_square</code></td><td><code>size</code></td><td>画边长为size的正方形</td><td><code>draw_square(70)</code></td></tr></tbody></table></li></ul><h2 id="四、讲解与互评-从-函数定义-到-模块化思维-10分钟" tabindex="-1">四、讲解与互评：从“函数定义”到“模块化思维”（10分钟） <a class="header-anchor" href="#四、讲解与互评-从-函数定义-到-模块化思维-10分钟" aria-label="Permalink to &quot;四、讲解与互评：从“函数定义”到“模块化思维”（10分钟）&quot;">​</a></h2><ol><li><strong>学生展示</strong>：选2组学生投屏代码，讲解： <ul><li>“你定义了哪些函数？参数有什么用？”</li><li>“如果要改图形颜色，需要改函数内部还是调用时？”（引导理解“封装性”：改函数内部，所有调用处同步生效）。</li></ul></li><li><strong>互评标准</strong>： <ul><li>函数名是否“见名知意”（如<code>draw_flower</code>比<code>a</code>更好）；</li><li>参数是否合理（如圆形用<code>radius</code>比<code>x</code>更清晰）；</li><li>组合图形的创意度（如是否有场景故事）。</li></ul></li><li>颁发“模块小能手”奖章给最佳工具库设计组。</li></ol><h2 id="五、总结与作业-5分钟" tabindex="-1">五、总结与作业（5分钟） <a class="header-anchor" href="#五、总结与作业-5分钟" aria-label="Permalink to &quot;五、总结与作业（5分钟）&quot;">​</a></h2><h2 id="课堂总结" tabindex="-1">课堂总结： <a class="header-anchor" href="#课堂总结" aria-label="Permalink to &quot;课堂总结：&quot;">​</a></h2><ul><li>函数=“预制乐高积木”，核心价值是“一次定义，多次复用”；</li><li>函数定义四要素：<code>def</code>、函数名、参数、冒号+缩进；</li><li>图形工具库=多个函数的组合，让代码更简洁、易维护。</li></ul><h2 id="课后作业" tabindex="-1">课后作业： <a class="header-anchor" href="#课后作业" aria-label="Permalink to &quot;课后作业：&quot;">​</a></h2><ol><li>完善个人“图形工具库”，新增1个带2个参数的函数（如<code>draw_rectangle(length, width)</code>）；</li><li>用工具库中的函数创作“我的卧室”场景（至少包含3个不同图形），代码中注明每个函数的作用。</li></ol><h2 id="教学理论支撑" tabindex="-1">教学理论支撑： <a class="header-anchor" href="#教学理论支撑" aria-label="Permalink to &quot;教学理论支撑：&quot;">​</a></h2><ol><li><strong>皮亚杰形式运算阶段理论</strong>：通过“乐高积木”“蛋糕配方”等具体类比，帮助学生理解抽象的“函数封装”概念，从具体操作过渡到逻辑抽象（理解“参数控制变量”的数学逻辑）。</li><li><strong>维果茨基最近发展区</strong>：提供函数模板（四要素框架）和AI代码助手作为“脚手架”，帮助学生跨越“从零散代码到结构化函数”的认知障碍，实现能力进阶。</li><li><strong>STEAM教育融合</strong>：结合工程（模块化设计思维，如工具库的组件化）、数学（参数化控制图形大小，如边长与面积的关系）、艺术（图形组合的创意表达），体现跨学科整合。</li><li><strong>自我决定理论</strong>：通过“工具库创作”“场景设计”等开放性任务，满足学生的自主需求（选择图形类型）和能力需求（完成后获得成就感），激发内在学习动机。</li></ol>`,35)])])}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
