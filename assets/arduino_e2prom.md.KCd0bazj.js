import{j as i,c as a,b as n,ag as l}from"./chunks/framework.CPnt7f93.js";const p="/assets/bios.D538My9D.jpg",h="/assets/rom.DaGHpro9.jpg",t="/assets/eprom1.Dr9s6u_w.jpeg",e="/assets/eprom.DDGpcF7q.jpeg",k="/assets/eprom2.DVfZnwJ2.jpeg",r="/assets/eprom3.BdExRouQ.jpeg",d="/assets/eprom4.DjYfBUMm.jpeg",A=JSON.parse('{"title":"E2PROM (EEPROM)","description":"","frontmatter":{},"headers":[],"relativePath":"arduino/e2prom.md","filePath":"arduino/e2prom.md","lastUpdated":1761651013000}'),E={name:"arduino/e2prom.md"};function g(y,s,c,b,o,u){return n(),a("div",null,[...s[0]||(s[0]=[l('<h1 id="e2prom-eeprom" tabindex="-1">E2PROM (EEPROM) <a class="header-anchor" href="#e2prom-eeprom" aria-label="Permalink to &quot;E2PROM (EEPROM)&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#eeprom">EEPROM</a></li><li><a href="#esp32">ESP32</a><ul><li><a href="#eeprom初始化">EEPROM初始化</a></li><li><a href="#读取eeprom">读取EEPROM</a></li><li><a href="#写入eeprom">写入EEPROM</a></li><li><a href="#写入-读取字符串">写入/读取字符串</a></li><li><a href="#写-读浮点">写/读浮点</a></li><li><a href="#读写所有数据类型">读写所有数据类型</a></li><li><a href="#读写-其他数据类型">读写 其他数据类型</a></li></ul></li><li><a href="#实验操作">实验操作</a><ul><li><a href="#实验一-记录灯的状态">实验一 记录灯的状态</a></li><li><a href="#实验二-记录结构体数据">实验二 记录结构体数据</a></li></ul></li></ul></nav><p><strong>EEPROM生产出来的前提背景</strong></p><p><img src="'+p+'" alt=""></p><p><strong>BIOS芯片</strong></p><p><img src="'+h+'" alt=""></p><p><strong>ROM芯片</strong></p><p>在微机的发展初期，BIOS都存放在ROM（Read Only Memory，只读存储器）中。ROM内部的资料是在ROM的制造工序中，在工厂里用特殊的方法被烧录进去的，其中的内容只能读不能改，一旦烧录进去，用户只能验证写入的资料是否正确，不能再作任何修改。如果发现资料有任何错误，则只有舍弃不用，重新订做一份。ROM是在生产线上生产的，由于成本高，一般只用在大批量应用的场合。</p><p>由于ROM制造和升级的不便，后来人们发明了PROM（Programmable ROM，可编程ROM）。最初从工厂中制作完成的PROM内部并没有资料，用户可以用专用的编程器将自己的资料写入，但是这种机会只有一次，一旦写入后也无法修改，若是出了错误，已写入的芯片只能报废。PROM的特性和ROM相同，但是其成本比ROM高，而且写入资料的速度比ROM的量产速度要慢，一般只适用于少量需求的场合或是ROM量产前的验证。</p><p><img src="'+t+'" alt=""></p><p><strong>EPROM芯片</strong></p><p><img src="'+e+'" alt=""></p><p><strong>正面的陶瓷封装上,玻璃窗口</strong></p><p><img src="'+k+'" alt=""></p><p><strong>EPROM芯片 擦除数据</strong></p><p><img src="'+r+'" alt=""></p><p><strong>EPROM芯片 写入数据</strong><img src="'+d+`" alt=""></p><p>EPROM（Erasable Programmable ROM，可擦除可编程ROM）芯片可重复擦除和写入，解决了PROM芯片只能写入一次的弊端。EPROM芯片有一个很明显的特征，在其正面的陶瓷封装上，开有一个玻璃窗口，透过该窗口，可以看到其内部的集成电路，紫外线透过该孔照射内部芯片就可以擦除其内的数据，完成芯片擦除的操作要用到EPROM擦除器。EPROM内资料的写入要用专用的编程器，并且往芯片中写内容时必须要加一定的编程电压（VPP=12—24V，随不同的芯片型号而定）。EPROM的型号是以27开头的，如27C020(8*256K)是一片2M Bits容量的EPROM芯片。EPROM芯片在写入资料后，还要以不透光的贴纸或胶布把窗口封住，以免受到周围的紫外线照射而使资料受损。</p><p><strong>EEPROM - 基本原理</strong></p><p>由于EPROM操作的不便，后来出的主板上BIOS ROM芯片大部分都采用EEPROM（Electrically Erasable Programmable ROM，电可擦除可编程ROM）。EPROM【立创】的擦除不需要借助于其它设备，它是以电子信号来修改其内容的，而且是以Byte为最小修改单位，不必将资料全部洗掉才能写入，彻底摆脱了EPROM Eraser和编程器的束缚。EPROM在写入数据时，仍要利用一定的编程电压，此时，只需用厂商提供的专用刷新程序就可以轻而易举地改写内容，所以，它属于双电压芯片。借助于EPROM芯片的双电压特性，可以使BIOS具有良好的防毒功能，在升级时，把跳线开关打至“ON”的位置，即给芯片加上相应的编程电压，就可以方便地升级；平时使用时，则把跳线开关打至“OFF”的位置，防止CIH类的病毒对BIOS芯片的非法修改。所以，至今仍有不少主板采用EPROM作为BIOS芯片并作为自己主板的一大特色。</p><h2 id="eeprom" tabindex="-1">EEPROM <a class="header-anchor" href="#eeprom" aria-label="Permalink to &quot;EEPROM&quot;">​</a></h2><p>EEPROM（Electrically Erasable Programmable read only memory）即电可擦可编程只读存储器，是一种掉电后数据不丢失（不挥发）存储芯片。</p><h4 id="eeprom具有以下几个突出的优势" tabindex="-1">EEPROM具有以下几个突出的优势： <a class="header-anchor" href="#eeprom具有以下几个突出的优势" aria-label="Permalink to &quot;EEPROM具有以下几个突出的优势：&quot;">​</a></h4><ol><li>非易失性：EEPROM内部数据的存储不依赖于电源，即使在断电或重新上电情况下，数据也能够长时间保留，确保了数据的可靠性和持久性。</li><li>擦写次数多：EEPROM的擦写次数通常可达到数万次以上，远高于传统的ROM(只读存储器)。</li><li>电子擦除：EEPROM是通过电子的擦除实现数据的清除操作，在实际应用中能够高效、精确地进行数据的擦除。</li><li>随机读写：EEPROM具备随机读写的能力，可以按需读取和更新数据，无须整体擦除。</li><li>低耗电：EEPROM在待机状态下的功耗非常低，适用于对功耗要求较高的场景。</li></ol><h2 id="esp32" tabindex="-1">ESP32 <a class="header-anchor" href="#esp32" aria-label="Permalink to &quot;ESP32&quot;">​</a></h2><p>ESP32内部没有专门的EEPROM，但是我们可以通过FLASH模拟EEPROM，FLASH与EEPROM也是非常相似的，都是非易失性存储器，使用EEPROM，我们就可以在不使用文件系统的情况下，来保存一些数据，可以实现一些更加复杂的功能。</p><p>例如，我们可以做到以下功能：</p><ul><li>保存变量的最终状态</li><li>保存我们的设置</li><li>保存设备被激活的次数</li><li>永久保存其它任何类型的数据</li><li>ESP32在Arduino是使用FLASH开辟的一块存储区域，默认的对象存储大小为4096个字节。</li></ul><h3 id="eeprom初始化" tabindex="-1">EEPROM初始化 <a class="header-anchor" href="#eeprom初始化" aria-label="Permalink to &quot;EEPROM初始化&quot;">​</a></h3><p>代码调用#include 后，已经默认定义了一个EEPROM对象，我们使用began方法初始化一下，参数为要操作的字节大小，最大为4096字节，所以这里的参数范围为0-4095。EEPROM的操作以字为单位，size最好设置为4的倍数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;EEPROM.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 4096</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(size);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="读取eeprom" tabindex="-1">读取EEPROM <a class="header-anchor" href="#读取eeprom" aria-label="Permalink to &quot;读取EEPROM&quot;">​</a></h3><p>从EEPROM上读取一个字节，使用EEPROM.read()；参数为读取的地址。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="写入eeprom" tabindex="-1">写入EEPROM <a class="header-anchor" href="#写入eeprom" aria-label="Permalink to &quot;写入EEPROM&quot;">​</a></h3><p>将数据写入EEPROM，使用EEPROM.write()；第一个参数为地址，第二个参数为保存的值。</p><p>注意: 通过EEPROM.write()写入数据后，之后需要调用EEPROM.commit()使更改生效，写入完成。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="写入-读取字符串" tabindex="-1">写入/读取字符串 <a class="header-anchor" href="#写入-读取字符串" aria-label="Permalink to &quot;写入/读取字符串&quot;">​</a></h3><p>要在 ESP32 EEPROM 中写入字符串，请使用 EEPROM 库中的以下函数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write a String starting from a specific address location</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">writeString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">myString);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>要从 ESP32 EEPROM 读取字符串，请使用下面所示的函数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This will return the String stored @ the specified address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">String myStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">readString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="写-读浮点" tabindex="-1">写/读浮点 <a class="header-anchor" href="#写-读浮点" aria-label="Permalink to &quot;写/读浮点&quot;">​</a></h3><p>要在 ESP32 EEPROM 存储器（FLASH）中写入或读取 Float 变量，您无需逐字节检查它如何存储在存储器中。只需调用以下两个函数进行写和读操作即可。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write a Floating Point Variable To EEPROM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">writeFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address, myFloat);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Read a Float Variable From EEPROM @ Specific Address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">myFloat </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">readFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="读写所有数据类型" tabindex="-1">读写所有数据类型 <a class="header-anchor" href="#读写所有数据类型" aria-label="Permalink to &quot;读写所有数据类型&quot;">​</a></h3><p>ESP32 EEPROM 库中还有两个有趣的 API（函数），您可以使用它们来写入和读取任何已知数据类型或用户定义的数据类型（例如结构体等）。它们是：put()和get()函数。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write Any Data Type To ESP32 EEPROM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address, myData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Read Any Data Type From ESP32 EEPROM</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(address, myData);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="读写-其他数据类型" tabindex="-1">读写 其他数据类型 <a class="header-anchor" href="#读写-其他数据类型" aria-label="Permalink to &quot;读写 其他数据类型&quot;">​</a></h3><p>以下是 ESP32 EEPROM 库中的一些 API，使您能够写入和读取所有已知数据类型。</p><p>下面对应的写入函数如下:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [EEPROM Write Functions]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeByte</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeChar</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeUChar</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeShort</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint16_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeLong</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeULong</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint32_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeLong64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeULong64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint64_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">float_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">double_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeBool</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">bool</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> writeBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> void*</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>下面对应的读取函数如下:</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [EEPROM Read Functions]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readByte</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readChar</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint8_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readUChar</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readShort</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint16_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int32_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readInt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint32_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int32_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readLong</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint32_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readULong</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readLong64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint64_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readULong64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">float_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">double_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readBool</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> maxLen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readString</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> readBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;"> maxLen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="实验操作" tabindex="-1">实验操作 <a class="header-anchor" href="#实验操作" aria-label="Permalink to &quot;实验操作&quot;">​</a></h2><h3 id="实验一-记录灯的状态" tabindex="-1">实验一 记录灯的状态 <a class="header-anchor" href="#实验一-记录灯的状态" aria-label="Permalink to &quot;实验一 记录灯的状态&quot;">​</a></h3><p>通过保存最后的 LED 状态来测试 EEPROM 存储器。LED 通过按钮切换，每当其状态发生变化时，最后的状态都会保存到 EEPROM 中。我们将重置(断电重启) ESP32 板，它应该从 EEPROM 中读取最后保存的状态。</p><details class="details custom-block"><summary>答案</summary><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;Arduino.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &lt;EEPROM.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> KEY_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> LED_1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> EEPROM_SIZE</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">115200</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1, INPUT_PULLUP);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输入上拉模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  pinMode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, OUTPUT);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //设置引脚为输出模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(EEPROM_SIZE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  Serial.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  delay</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">digitalRead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(KEY_1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(flag) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, status);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> EEPROM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">); </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(LED_1, status);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div></details><h3 id="实验二-记录结构体数据" tabindex="-1">实验二 记录结构体数据 <a class="header-anchor" href="#实验二-记录结构体数据" aria-label="Permalink to &quot;实验二 记录结构体数据&quot;">​</a></h3>`,60)])])}const m=i(E,[["render",g]]);export{A as __pageData,m as default};
