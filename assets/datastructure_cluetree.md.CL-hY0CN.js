import{j as o,E as i,c as r,b as e,ag as a,h as c,w as l,f as d,I as p,ah as n}from"./chunks/framework.CPnt7f93.js";const _="/assets/tb-tree00.CADWBQ7K.webp",m="/assets/tb-tree04.B8gh2HAg.png",u="/assets/tb-tree05.Cd6LQCIS.png",g="/assets/tb-tree02.Ct-lQOzy.png",h="/assets/tb-tree06.D0Fkl3fh.webp",b="/assets/tb-tree07.DIXL2Q1y.png",f="/assets/tb-tree01.DPkQuAzh.png",x=JSON.parse('{"title":"线索二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"datastructure/cluetree.md","filePath":"datastructure/cluetree.md","lastUpdated":1761651013000}'),C={name:"datastructure/cluetree.md"};function k(T,t,A,P,S,v){const s=i("Mermaid");return e(),r("div",null,[t[1]||(t[1]=a('<h1 id="线索二叉树" tabindex="-1">线索二叉树 <a class="header-anchor" href="#线索二叉树" aria-label="Permalink to &quot;线索二叉树&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#线索化二叉树">线索化二叉树</a></li><li><a href="#线索二叉树实现">线索二叉树实现</a></li></ul></nav><p>对一棵二叉树中所有节点的空指针域按照某种遍历方式加线索的过程叫作线索化，被线索化了的二叉树称为线索二叉树。</p><p><img src="'+_+'" alt=""></p><p>知道了“前驱”和“后继”信息，就可以把二叉树看作一个链表结构，从而可以像遍历链表那样来遍历二叉树，进而提高效率。</p><h2 id="线索化二叉树" tabindex="-1">线索化二叉树 <a class="header-anchor" href="#线索化二叉树" aria-label="Permalink to &quot;线索化二叉树&quot;">​</a></h2><p><img src="'+m+'" alt=""></p><p>将上图的二叉树，进行 <strong>中序线索二叉树</strong>, 先中序遍历的数列为 <code>8,3,10,1,14,6</code>。</p><p>实现:</p>',9)),(e(),c(n,null,{default:l(()=>[p(s,{id:"mermaid-27",class:"mermaid",graph:"flowchart%20LR%0A8%20%3C---%3E%203%20%3C---%3E%2010%20%3C---%3E%201%20%3C---%3E%2014%20%3C---%3E%206%0A"})]),fallback:l(()=>[...t[0]||(t[0]=[d(" Loading... ",-1)])]),_:1})),t[2]||(t[2]=a('<p>那么以上图为例，线索化二叉树后的样子如下图</p><p><img src="'+u+'" alt=""></p><ul><li><code>8</code> 的后继节点为 <code>3</code></li><li><code>3</code> 由于 左右节点都有元素，不能线索化</li><li><code>10</code> 的前驱节点为 <code>3</code>，后继节点为 <code>1</code></li><li><code>1</code> 不能线索化</li><li><code>14</code> 的前驱节点为 <code>1</code>，后继节点为 <code>6</code></li><li><code>6</code> 有左节点，不能线索化</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>当线索化二叉树后，那么一个 Node 节点的 left 和 right 属性，就有如下情况：</p><ul><li>left 指向的是 左子树，也可能是指向 前驱节点</li></ul><p>例如：节点 1 left 节点指向的是左子树，节点 10 的 left 指向的就是前驱节点</p><ul><li>right 指向的是 右子树，也可能是指向 后继节点</li></ul><p>例如：节点 3 的 right 指向的是右子树，节点 10 的 right 指向的是后继节点</p></div><h2 id="线索二叉树实现" tabindex="-1">线索二叉树实现 <a class="header-anchor" href="#线索二叉树实现" aria-label="Permalink to &quot;线索二叉树实现&quot;">​</a></h2><p><img src="'+g+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">标识域</p><ol><li>如果ltag=0，表示指向节点的左孩子。</li><li>如果ltag=1，则表示lchild为线索，指向节点的直接前驱</li><li>如果rtag=0，表示指向节点的右孩子。</li><li>如果rtag=1，则表示rchild为线索，指向节点的直接后继</li></ol></div><p><img src="'+h+'" alt=""><img src="'+b+'" alt=""></p><details class="details custom-block"><summary>结构体定义</summary><p><img src="'+f+'" alt=""></p></details>',9))])}const D=o(C,[["render",k]]);export{x as __pageData,D as default};
