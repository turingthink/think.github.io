import{j as t,c as e,b as s,ag as r}from"./chunks/framework.CPnt7f93.js";const i="/assets/001165468.W-C8f3_4.jpeg",p="/assets/images.48WQk2_M.jpeg",o="/assets/tetull.Cxsa_IMo.png",l="/assets/images1.BDAvKFpC.jpeg",d="/assets/EPSON-LQ-2190-24PIN.Jmxb8fWV.png",c="/assets/eps0.rvcHl95r.png",h="/assets/eps2.CPWiM5hc.png",n="/assets/eps1.B7DMquac.png",m="/assets/com0.D_pkk7xu.png",u="/assets/com1.B2-Wg0cm.png",_="/assets/uart1.8LJv9rrJ.jpeg",b="/assets/modem0.MKmnWw7z.jpeg",g="/assets/modem1.Dvy2iwQp.jpeg",f="/assets/modem2.CQG4k85u.jpeg",q="/assets/Baudrate.BcLn1-QH.png",P="/assets/odd.Dl0FDam7.png",S="/assets/even.rykjVaEO.png",T="/assets/Baudrate1.FHivEMAU.webp",k="/assets/Baudrate2.BbzHgrOw.jpeg",x="/assets/uartusbpc.drawio.GEcfT0NZ.png",R="/assets/eps32wroom32.BH_it6Z4.png",U="/assets/esp32001.C76Sd5hV.jpeg",B="/assets/esp.Dg52PYv2.png",C="/assets/esp32cp2102.DseTZPLJ.png",M="/assets/cp21021.CKrCX85g.png",A="/assets/cp2102esp32.5nRqdtzc.png",D="/assets/cp21023.B8O7QYtr.png",v="/assets/usb.PiRihMmZ.png",E="/assets/micousb3.aoIgs0JQ.png",y="/assets/micousb.vhHf69YA.jpeg",z="/assets/micusb1.JnIqk8oN.png",H="/assets/usb1.P3FwiEpr.jpeg",Q=JSON.parse('{"title":"UART 硬件原理","description":"","frontmatter":{},"headers":[],"relativePath":"arduino/1.uart.md","filePath":"arduino/1.uart.md","lastUpdated":1761651013000}'),j={name:"arduino/1.uart.md"};function I(w,a,N,X,V,J){return s(),e("div",null,[...a[0]||(a[0]=[r('<h1 id="uart-硬件原理" tabindex="-1">UART 硬件原理 <a class="header-anchor" href="#uart-硬件原理" aria-label="Permalink to &quot;UART 硬件原理&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#uart-简介">uart 简介</a><ul><li><a href="#并串">并串</a></li><li><a href="#串口">串口</a></li><li><a href="#单工通信">单工通信</a></li><li><a href="#半双工通信">半双工通信</a></li><li><a href="#全双工通信">全双工通信</a></li></ul></li><li><a href="#uart-通讯协议">uart 通讯协议</a><ul><li><a href="#uart协议帧">UART协议帧</a></li></ul></li><li><a href="#波特率">波特率</a></li><li><a href="#晶振">晶振</a></li><li><a href="#开发板联接方式">开发板联接方式</a><ul><li><a href="#esp32芯片相关的图">ESP32芯片相关的图</a></li><li><a href="#cp2102芯片相关的图">CP2102芯片相关的图</a></li></ul></li><li><a href="#microusb">microUSB</a><ul><li><a href="#接口说明">接口说明</a></li><li><a href="#usb-传输标准与接口">USB 传输标准与接口</a></li></ul></li><li><a href="#参考文档">参考文档</a></li></ul></nav><h2 id="uart-简介" tabindex="-1">uart 简介 <a class="header-anchor" href="#uart-简介" aria-label="Permalink to &quot;uart 简介&quot;">​</a></h2><p>UART 全称Universal Asynchronous Receiver/Transmitter，通用异步收/发器，是一种非常常见的异步收发协议，在嵌入式领域应用十分广泛。收发双方按照约定好通讯波特率进行配置，如果波特率不匹配会导致接收到乱码。</p><p>电脑主板上的接口展示:</p><p><img src="'+i+'" alt=""></p><h4 id="接口连接线" tabindex="-1">接口连接线 <a class="header-anchor" href="#接口连接线" aria-label="Permalink to &quot;接口连接线&quot;">​</a></h4><p><img src="'+p+'" alt=""></p><h3 id="并串" tabindex="-1">并串 <a class="header-anchor" href="#并串" aria-label="Permalink to &quot;并串&quot;">​</a></h3><p>并行接口，称为并口。并行端口使用25针D型连接头。所谓“并行”是指通过并行线路同时传输8位数据，从而大大提高了数据传输速度，但是并行传输线路的长度受到限制，因为长度增加，干扰会增加，并且数据容易出错。目前，并行接口主要用作打印机端口等。</p><ol><li>以并行方式传输的数据通道的宽度，也称接口传输的位数；</li><li>用于协调并行数据传输的额外接口控制线或称交互信号的特性。 数据的宽度可以从1～128位或者更宽，最常用的是8位，可通过接口一次传送8个数据位。在计算机领域最常用的并行接口是通常所说的LPT接口。</li></ol><p><img src="'+o+'" alt=""></p><div class="info custom-block"><p class="custom-block-title">优缺点:</p><p>优点：因为可以多位数据一起传输，所以传输速度很快。</p><p>缺点：内存有多少位，就要用多少数据线，所以需要大量的数据线，成本很高.</p></div><p><img src="'+l+'" alt=""></p><details class="details custom-block"><summary>应用场景</summary><h4 id="应用设备" tabindex="-1">应用设备 <a class="header-anchor" href="#应用设备" aria-label="Permalink to &quot;应用设备&quot;">​</a></h4><p>24针式打印机.</p><p><img src="'+d+'" alt=""></p><p>现在24针打印机, 主要用于打票据和单据使用上使用. 主要是可以同时打多张. 银行, 税务, 移动(通信公司)</p><p><img src="'+c+'" alt=""><img src="'+h+'" alt=""><img src="'+n+'" alt=""></p></details><h3 id="串口" tabindex="-1">串口 <a class="header-anchor" href="#串口" aria-label="Permalink to &quot;串口&quot;">​</a></h3><p>串行通讯是指仅用一根接收线和一根发送线就能将数据以位进行传输的一种通讯方式。 尽管串行通讯的比按字节传输的并行通信慢，但是串口可以在仅仅使用两根线的情况下就能实现数据的传输。 典型的串口通信使用3根线完成，分别是地线、发送、接收。</p><p><img src="'+m+'" alt=""></p><div class="info custom-block"><p class="custom-block-title">优缺点:</p><p>优点：使用的数据线少，在远距离通信中可以节约通信成本。</p><p>缺点：因为每次只能传输一位数据，所以传输速度比较低。</p></div><h3 id="单工通信" tabindex="-1">单工通信 <a class="header-anchor" href="#单工通信" aria-label="Permalink to &quot;单工通信&quot;">​</a></h3><p>单工模式(Simplex Communication)的数据传输是单向的。通信双方中，一方固定为发送端，一方则固定为接收端。信息只能沿一个方向传输，使用一根传输线。</p><h3 id="半双工通信" tabindex="-1">半双工通信 <a class="header-anchor" href="#半双工通信" aria-label="Permalink to &quot;半双工通信&quot;">​</a></h3><p>半双工模式(Half Duplex)通信使用同一根传输线，既可以发送数据又可以接收数据，但不能同时进行发送和接收。数据传输允许数据在两个方向上传输，但是，在任何时刻只能由其中的一方发送数据，另一方接收数据。因此半双工模式既可以使用一条数据线，也可以使用两条数据线。半双工通信中每端需有一个收发切换电子开关，通过切换来决定数据向哪个方向传输。因为有切换，所以会产生时间延迟，信息传输效率低些。</p><h3 id="全双工通信" tabindex="-1">全双工通信 <a class="header-anchor" href="#全双工通信" aria-label="Permalink to &quot;全双工通信&quot;">​</a></h3><p>全双工模式(Full Duplex)通信允许数据同时在两个方向上传输。因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。在全双工模式中，每一端都有发送器和接收器，有两条传输线，信息传输效率高。</p><p><img src="'+u+'" alt=""></p><h2 id="uart-通讯协议" tabindex="-1">uart 通讯协议 <a class="header-anchor" href="#uart-通讯协议" aria-label="Permalink to &quot;uart 通讯协议&quot;">​</a></h2><p>典型的串口通信使用3根线完成，分别是：发送线（TX）、接收线（RX）和地线（GND），通信时必须将双方的TX和RX交叉连接并且GND相连才可正常通信，如下图所示：</p><p><img src="'+_+'" alt=""></p><details class="details custom-block"><summary>硬件流控制</summary><h3 id="硬件流控制" tabindex="-1">硬件流控制 <a class="header-anchor" href="#硬件流控制" aria-label="Permalink to &quot;硬件流控制&quot;">​</a></h3><p>硬件流控制常用的有RTS/CTS流控制和DTR/DSR（数据终端就绪/数据设置就绪）流控制。</p><p>硬件流控制必须将相应的电缆线连上，用RTS/CTS（请求发送/清除发送）流控制时，应将通讯两端的RTS、CTS线对应相连，数据终端设备（如计算机）使用RTS来起始调制解调器或其它数据通讯设备的数据流，而数据通讯设备（如调制解调器）则用CTS来起动和暂停来自计算机的数据流。这种硬件握手方式的过程为：我们在编程时根据接收端缓冲区大小设置一个高位标志（可为缓冲区大小的75％）和一个低位标志（可为缓冲区大小的25％），当缓冲区内数据量达到高位时，我们在接收端将CTS线置低电*（送逻辑0），当发送端的程序检测到CTS为低后，就停止发送数据，直到接收端缓冲区的数据量低于低位而将CTS置高电*。RTS则用来标明接收设备有没有准备好接收数据。</p><p>常用的流控制还有还有DTR/DSR（数据终端就绪/数据设置就绪）。我们在此不再详述。由于流控制的多样性，我个人认为，当软件里用了流控制时，应做详细的说明，如何接线，如何应用。</p><p><code>RTS</code>:（Require ToSend，发送请求）为输出信号，用于指示本设备准备好可接收数据，低电<em>有效，低电</em>说明本设备可以接收数据。</p><p><code>CTS</code>:（Clear ToSend，发送允许）为输入信号，用于判断是否可以向对方发送数据，低电<em>有效，低电</em>说明本设备可以向对方发送数据。</p><h3 id="应用设备-1" tabindex="-1">应用设备 <a class="header-anchor" href="#应用设备-1" aria-label="Permalink to &quot;应用设备&quot;">​</a></h3><p><img src="'+b+'" alt=""><img src="'+g+'" alt=""><img src="'+f+'" alt=""></p></details><h3 id="uart协议帧" tabindex="-1">UART协议帧 <a class="header-anchor" href="#uart协议帧" aria-label="Permalink to &quot;UART协议帧&quot;">​</a></h3><p>在 UART中，传输模式为数据包形式。数据包由起始位、数据帧、奇偶校验位和停止位组成。</p><p><img src="'+q+'" alt=""></p><table tabindex="0"><thead><tr><th>起始位</th><th>数据位</th><th>奇偶校验位</th><th>停止位</th></tr></thead><tbody><tr><td>1位</td><td>5~8位</td><td>0~1位</td><td>1、1.5、2 位</td></tr><tr><td>逻辑‘0’</td><td>0,1代码</td><td>0或1</td><td>逻辑‘1’</td></tr></tbody></table><h4 id="起始位" tabindex="-1">起始位 <a class="header-anchor" href="#起始位" aria-label="Permalink to &quot;起始位&quot;">​</a></h4><p>当不传输数据时， UART 数据传输线通常保持高电压电平。若要开始数据传输，发送UART 会将传输线从高电平拉到低电平并保持1 个时钟周期。当接收 UART 检测到高到低电压跃迁时，便开始以波特率对应的频率读取数据帧中的位。</p><p>起始位必须是持续一个比特时间的逻辑0电平，标志传输一个字符的开始，接收方可用起始位使自己的接收时钟与发送方的数据同步。</p><h4 id="数据位" tabindex="-1">数据位 <a class="header-anchor" href="#数据位" aria-label="Permalink to &quot;数据位&quot;">​</a></h4><p>数据帧包含所传输的实际数据。如果使用奇偶校验位，数据帧长度可以是5 位到 8 位。如果不使用奇偶校验位，数据帧长度可以是9 位。在大多数情况下，数据以最低有效位优先方式发送。</p><p>数据位紧跟在起始位之后，是通信中的真正有效信息。数据位的位数可以由通信双方共同约定。传输数据时先传送字符的低位，后传送字符的高位。</p><h4 id="奇偶校验位" tabindex="-1">奇偶校验位 <a class="header-anchor" href="#奇偶校验位" aria-label="Permalink to &quot;奇偶校验位&quot;">​</a></h4><p>奇偶性描述数字是偶数还是奇数。通过奇偶校验位，接收 UART判断传输期间是否有数据发生改变。电磁辐射、不一致的波特率或长距离数据传输都可能改变数据位。校验位可以配置成 1 位偶校验或 1 位奇校验或无校验位。接收UART 读取数据帧后，将统计数值为 1 的位，检查总数是偶数还是奇数。如果奇偶校验位为0 （偶数奇偶校验），则数据帧中的1或逻辑高位总计应为偶数。如果奇偶校验位为 1 （奇数奇偶校验），则数据帧中的1 或逻辑高位总计应为奇数。当奇偶校验位与数据匹配时，UART 认为传输未出错。但是，如果奇偶校验位为0 ，而总和为奇数，或者奇偶校验位为 1 ，而总和为偶数，则UART 认为数据帧中的位已改变。</p><p>奇偶校验位仅占一位，用于进行奇校验或偶校验，奇偶检验位不是必须有的。如果是奇校验，需要保证传输的数据总共有奇数个逻辑高位；如果是偶校</p><p><strong>注意: 正常情况下, 一般不需要设置校验位.</strong></p><details class="details custom-block"><summary>奇偶校验位详细</summary><p><code>奇校验（odd parity）</code>：让传输的数据（包含校验位）中1的个数为奇数。即：如果传输字节中1的个数是奇数，则校验位为“0”，偶数相反。以发送字符：10101010为例。</p><p><img src="'+P+'" alt=""></p><p><code>偶校验（even parity）</code>：让传输的数据（包含校验位）中1的个数为偶数。即：如果传输字节中1的个数是偶数，则校验位为“0”，奇数相反。还是以发送字符：10101010为例。</p><p><img src="'+S+'" alt=""></p></details><h4 id="停止位" tabindex="-1">停止位 <a class="header-anchor" href="#停止位" aria-label="Permalink to &quot;停止位&quot;">​</a></h4><p>为了表示数据包结束，发送 UART 将数据传输线从低电压驱动到高电压并保持1 到 2 位时间。停止位可以是是1位、1.5位或2位，可以由软件设定。它一定是逻辑1电平，标志着传输一个字符的结束。</p><h4 id="空闲位" tabindex="-1">空闲位 <a class="header-anchor" href="#空闲位" aria-label="Permalink to &quot;空闲位&quot;">​</a></h4><p>空闲位是指从一个字符的停止位结束到下一个字符的起始位开始，表示线路处于空闲状态，必须由高电平来填充。</p><h2 id="波特率" tabindex="-1">波特率 <a class="header-anchor" href="#波特率" aria-label="Permalink to &quot;波特率&quot;">​</a></h2><p>波特率是电子通信领域的一种术语，用于描述信道的数据传输速度。所谓信道，可以是无线的，也可以是有线的。波特率表示单位时间内传送的码元符号的个数，它是对符号传输速率的一种度量，它用单位时间内载波调制状态改变的次数来表示，波特率即指一个单位时间内传输符号的个数。</p><p>波特率即串口通信的速率，它表示每秒传输二进制数据的位数，单位是bps，即位/秒，常用的波特率有9600、19200、38400、57600和115200等。波特率通常单位是bit/s，也就是二进制位/秒。因为一个字节是8个bit，而一个字节通常可以表达一个ASCII码，比如一个英文字母，所以：9600的波特率的信道，理论上每秒可以传输9200/8个英文字母的数据量，也就是1200个字节，大约1.2KB。而19200则是每秒可传输2400字节。</p><p><img src="'+T+'" alt=""> 这是波形图的样例:</p><p>因此，在通信双方约定波特率为115200的情况下，只要发送方发送的每位比特位的持续时间为8.68us，那么正常情况下接收方就能准确无误地解析数据。</p><p><img src="'+k+'" alt=""> 这是示波器上所测到的数据样图:</p><p>硬件: 设计电路时经常采用11.0592Mhz这样“不规则”晶振，看起来不规则，实际上很规则，原因是可以精确分频成常用波特率。</p><p>11.0592MHz = 11059200 = 115200 x 96</p><p>11.0592MHz = 11059200 = 57600 x 192</p><p>11.0592MHz = 11059200 = 19200 x 576</p><h2 id="晶振" tabindex="-1">晶振 <a class="header-anchor" href="#晶振" aria-label="Permalink to &quot;晶振&quot;">​</a></h2><p>以11.0592M时钟的计数所需时间：假如我们在该方波的每个上升沿计一个数，则计11,059,200个数所需的时间为1s，所以计一个数所需的时间为1/11,059,200。</p><p>115200波特率下发送一位数据所需要的时间为：1/115200=8.68us。</p><p>传输一位所需的计数值为：8.68/(1/11,059,200)=96。11.0592M时钟115200波特率下计96数就会发送一位数据。</p><h2 id="开发板联接方式" tabindex="-1">开发板联接方式 <a class="header-anchor" href="#开发板联接方式" aria-label="Permalink to &quot;开发板联接方式&quot;">​</a></h2><p>下面是用pc机联接开发板的图, 开发板芯片之间的整理连接图.</p><p><img src="'+x+'" alt=""></p><h3 id="esp32芯片相关的图" tabindex="-1">ESP32芯片相关的图 <a class="header-anchor" href="#esp32芯片相关的图" aria-label="Permalink to &quot;ESP32芯片相关的图&quot;">​</a></h3><p><img src="'+R+'" alt=""></p><p><code>ESP32</code> 芯片的解剖图, 会看到芯片里的结构和每个针脚的功能.</p><details class="details custom-block"><summary>串口通信的针脚说明</summary><p><img src="'+U+'" alt=""></p></details><p><img src="'+B+'" alt=""></p><p><code>ESP32</code> 针脚说明图.</p><ol><li>蓝色块内的针脚是用于连接到串口的 RX 和 TX 通信针脚.</li><li>紫色块内的针脚是用于连接到串口的 RTS 和 CTS 控制针脚。</li></ol><p><img src="'+C+'" alt=""></p><p><code>ESP32</code> 芯片的原理图.</p><h3 id="cp2102芯片相关的图" tabindex="-1">CP2102芯片相关的图 <a class="header-anchor" href="#cp2102芯片相关的图" aria-label="Permalink to &quot;CP2102芯片相关的图&quot;">​</a></h3><p><img src="'+M+'" alt=""></p><ol><li>蓝色块内的针脚是用接到 ESP32 的 uart 串口0上, TX0 和 RX0 分别接到了 ESP32针脚35和34上。</li><li>紫色块内的针脚也用接到ESP32的IO3和IO5上, ESP32针脚16和23上。</li><li>红色块内的针脚是用于接USB相关的针脚上.</li><li>红色块内中绿色块的是用于连接到MircoUSB针脚上的。</li></ol><p><img src="'+A+'" alt=""></p><p><code>CP2102</code> 芯片的原理图, 这块主要是与 <code>ESP32</code> 芯片进行串口通信的。</p><p><img src="'+D+'" alt=""></p><p><code>CP2102</code> 芯片给出的官方电路图</p><details class="details custom-block"><summary>48HMz 晶振</summary><h3 id="_48mhz" tabindex="-1">48MHz <a class="header-anchor" href="#_48mhz" aria-label="Permalink to &quot;48MHz&quot;">​</a></h3><p>48MHz的晶振，115200波特率下发送一位数据所需要的时间为：1/48,000,000=204.16ns。</p><p>传输一位所需的计数值为：204.16/(1/48,000,000)=48。</p><p>当MCU时钟为48MHz，波特率为115200，48MHz/115200=416.67，按照417分频，实际波特率为48M/417=115108，误差为（115200-115108）/115200，约为0.08%，这个误差很小，对串口通讯没什么影响。</p><p>但是，当系统时钟较低，或者波特率较高时，也就是两者相差倍率较小时，这个误差就不可忽视。对于一些较早的51内核的MCU，由于运行频率低，采用非整数的晶振（比如11.0592M等）就是为了使用常见波特率时（比如9600、115200），分频的误差尽量小。</p></details><p><a href="https://zhuanlan.zhihu.com/p/89302933" target="_blank" rel="noreferrer">芯片所有的封装类型</a></p><h2 id="microusb" tabindex="-1">microUSB <a class="header-anchor" href="#microusb" aria-label="Permalink to &quot;microUSB&quot;">​</a></h2><p>Micro-B类型的USB接口，相信大家都认识，只是不知道它的专业名称，在智能手机发展的前期，绝大多数的智能手机（苹果手机除外）都采用了Micro-B型接口作为充电和数据接口。在USB 3.0标准发布后，Micro-B接口也有了新的造型，相信大家也不陌生，我们购买的支持USB 3.0的移动硬盘盒大部分就采用了该接口。</p><p><img src="'+v+'" alt=""></p><p><img src="'+E+'" alt=""></p><h3 id="接口说明" tabindex="-1">接口说明 <a class="header-anchor" href="#接口说明" aria-label="Permalink to &quot;接口说明&quot;">​</a></h3><p><img src="'+y+'" alt=""></p><table tabindex="0"><thead><tr><th>引脚</th><th>名称</th><th>线缆颜色</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>VBUS</td><td>红色</td><td>+5V供电</td></tr><tr><td>2</td><td>D-</td><td>白色(主色)/蓝色</td><td>差分数据-</td></tr><tr><td>3</td><td>D+</td><td>绿色</td><td>差分数据+</td></tr><tr><td>4</td><td>ID</td><td>N/A</td><td>区分另一端接口类型 A 接口（主机）：接地 B接口（设备）：不连接</td></tr><tr><td>5</td><td>GND</td><td>黑色</td><td>地</td></tr></tbody></table><p><img src="'+z+'" alt=""></p><p>Mini USB除了第4针外，其他接口功能皆与标准USB相同。第4针成为ID，地线在mini-A上连接到第5针，在mini-B可以悬空亦可连接到第5针。</p><h3 id="usb-传输标准与接口" tabindex="-1">USB 传输标准与接口 <a class="header-anchor" href="#usb-传输标准与接口" aria-label="Permalink to &quot;USB 传输标准与接口&quot;">​</a></h3><p>总结一下USB传输标准与接口之间的支持关系</p><p><img src="'+H+'" alt=""></p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="../public/datasheet/esp32-wroom-32_datasheet_cn.pdf">1. ESP32 datasheet 中文</a></p><p><a href="../public/datasheet/esp32-wroom-32_datasheet_en.pdf">2. ESP32 datasheet 英文</a></p><p><a href="../public/datasheet/cp2102.pdf">3. CP2102 datasheet</a></p><p><a href="../public/datasheet/esp32_devkitc_v4-sch.pdf">4. Devkit_v4</a></p><p><a href="../public/datasheet/esp32_hardware_design_guidelines_cn.pdf">5. Hardware Design</a></p><p><a href="../public/datasheet/esp32_technical_reference_manual_cn.pdf">6. Technical Reference</a></p>',103)])])}const W=t(j,[["render",I]]);export{Q as __pageData,W as default};
